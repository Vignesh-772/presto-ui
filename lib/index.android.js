module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nmodule.exports = {\n\tinit: __webpack_require__(/*! ./src/init */ \"./src/init.js\"),\n\tdoms: __webpack_require__(/*! ./src/doms */ \"./src/doms/index.js\"),\n\thandler: __webpack_require__(/*! ./src/handler */ \"./src/handler.js\"),\n\thelpers: __webpack_require__(/*! ./src/helpers */ \"./src/helpers/index.js\"),\n\tbaseView: __webpack_require__(/*! ./src/baseView */ \"./src/baseView.js\"),\n\tanimations: __webpack_require__(/*! ./src/animations */ \"./src/animations.js\"),\n\tcallbackMapper: __webpack_require__(/*! ./src/helpers/common/callbackMapper */ \"./src/helpers/common/callbackMapper.js\"),\n\tgetOS: __webpack_require__(/*! ./src/helper */ \"./src/helper.js\").getOS,\n\tprestoMerge: __webpack_require__(/*! ./src/helper */ \"./src/helper.js\").merge,\n\tprestoClone: __webpack_require__(/*! ./src/helper */ \"./src/helper.js\").clone\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9pbmRleC5qcz80MWY1Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpbml0IiwicmVxdWlyZSIsImRvbXMiLCJoYW5kbGVyIiwiaGVscGVycyIsImJhc2VWaWV3IiwiYW5pbWF0aW9ucyIsImNhbGxiYWNrTWFwcGVyIiwiZ2V0T1MiLCJwcmVzdG9NZXJnZSIsIm1lcmdlIiwicHJlc3RvQ2xvbmUiLCJjbG9uZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNoQkMsT0FBTUMsbUJBQU9BLENBQUMsaUNBQVIsQ0FEVTtBQUVoQkMsT0FBT0QsbUJBQU9BLENBQUMsdUNBQVIsQ0FGUztBQUdoQkUsVUFBVUYsbUJBQU9BLENBQUMsdUNBQVIsQ0FITTtBQUloQkcsVUFBVUgsbUJBQU9BLENBQUMsNkNBQVIsQ0FKTTtBQUtoQkksV0FBV0osbUJBQU9BLENBQUMseUNBQVIsQ0FMSztBQU1oQkssYUFBWUwsbUJBQU9BLENBQUMsNkNBQVIsQ0FOSTtBQU9oQk0saUJBQWdCTixtQkFBT0EsQ0FBQyxtRkFBUixDQVBBO0FBUWhCTyxRQUFPUCxtQkFBT0EsQ0FBQyxxQ0FBUixFQUF3Qk8sS0FSZjtBQVNoQkMsY0FBYVIsbUJBQU9BLENBQUMscUNBQVIsRUFBd0JTLEtBVHJCO0FBVWhCQyxjQUFhVixtQkFBT0EsQ0FBQyxxQ0FBUixFQUF3Qlc7QUFWckIsQ0FBakIiLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFwiSlVTUEFZIFRlY2hub2xvZ2llc1wiXG4qIEpVU1BBWSBUZWNobm9sb2dpZXMgUHZ0LiBMdGQuIFtodHRwczovL3d3dy5qdXNwYXkuaW5dXG4qXG4qIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpVU1BBWSBQbGF0Zm9ybS5cbipcbiogSlVTUEFZIFBsYXRmb3JtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiogaXQgZm9yIG9ubHkgZWR1Y2F0aW9uYWwgcHVycG9zZXMgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWxcbiogUHVibGljIExpY2Vuc2UgKEdOVSBBR1BMKSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbixcbiogZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiogRm9yIEVudGVycHJpc2UvQ29tbWVyaWNhbCBsaWNlbnNlcywgY29udGFjdCA8aW5mb0BqdXNwYXkuaW4+LlxuKlxuKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgVGhlIGVuZCB1c2VyIHdpbGxcbiogYmUgbGlhYmxlIGZvciBhbGwgZGFtYWdlcyB3aXRob3V0IGxpbWl0YXRpb24sIHdoaWNoIGlzIGNhdXNlZCBieSB0aGVcbiogQUJVU0Ugb2YgdGhlIExJQ0VOU0VEIFNPRlRXQVJFIGFuZCBzaGFsbCBJTkRFTU5JRlkgSlVTUEFZIGZvciBzdWNoXG4qIGRhbWFnZXMsIGNsYWltcywgY29zdCwgaW5jbHVkaW5nIHJlYXNvbmFibGUgYXR0b3JuZXkgZmVlIGNsYWltZWQgb24gSnVzcGF5LlxuKiBUaGUgZW5kIHVzZXIgaGFzIE5PIHJpZ2h0IHRvIGNsYWltIGFueSBpbmRlbW5pZmljYXRpb24gYmFzZWQgb24gaXRzIHVzZVxuKiBvZiBMaWNlbnNlZCBTb2Z0d2FyZS4gU2VlIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbipcbiogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4qIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLmh0bWw+LlxuKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGluaXQ6IHJlcXVpcmUoXCIuL3NyYy9pbml0XCIpLFxuXHRkb21zIDogcmVxdWlyZShcIi4vc3JjL2RvbXNcIiksXG5cdGhhbmRsZXIgOiByZXF1aXJlKFwiLi9zcmMvaGFuZGxlclwiKSxcblx0aGVscGVycyA6IHJlcXVpcmUoXCIuL3NyYy9oZWxwZXJzXCIpLFxuXHRiYXNlVmlldyA6IHJlcXVpcmUoXCIuL3NyYy9iYXNlVmlld1wiKSxcblx0YW5pbWF0aW9uczogcmVxdWlyZSgnLi9zcmMvYW5pbWF0aW9ucycpLFxuXHRjYWxsYmFja01hcHBlcjogcmVxdWlyZSgnLi9zcmMvaGVscGVycy9jb21tb24vY2FsbGJhY2tNYXBwZXInKSxcblx0Z2V0T1M6IHJlcXVpcmUoJy4vc3JjL2hlbHBlcicpLmdldE9TLFxuXHRwcmVzdG9NZXJnZTogcmVxdWlyZSgnLi9zcmMvaGVscGVyJykubWVyZ2UsXG5cdHByZXN0b0Nsb25lOiByZXF1aXJlKCcuL3NyYy9oZWxwZXInKS5jbG9uZVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./src/PrestoUIInterface.js":
/*!**********************************!*\
  !*** ./src/PrestoUIInterface.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar prestoDom = __webpack_require__(/*! ./doms */ \"./src/doms/index.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"./src/helpers/index.js\");\nvar webParseParams;\nvar iOSParseParams;\nvar parseParams;\nvar helper = __webpack_require__(/*! ./helper */ \"./src/helper.js\");\n\nif (false) {} else if (false) {} else if (true) {\n  parseParams = helpers.android.parseParams;\n}\n\nfunction domAll(elem) {\n  if (!elem.__ref) {\n    elem.__ref = createPrestoElement();\n  }\n\n  if (elem.props.id) {\n    elem.__ref.__id = parseInt(elem.props.id, 10) || elem.__ref.__id;\n  }\n\n  var type = helper.clone(elem.type, null);\n  var props = helper.clone(elem.props, null);\n\n  if (props.focus == false && \"ANDROID\" === \"ANDROID\") {\n    delete props.focus;\n  }\n\n  var children = [];\n\n  for (var i = 0; i < elem.children.length; i++) {\n    children.push(domAll(elem.children[i]));\n  }\n\n  if (__OS == \"WEB\" && props.onResize) {\n    window.__resizeEvent = props.onResize;\n  }\n\n  props.id = elem.__ref.__id;\n  if (elem.parentType && \"ANDROID\" == \"ANDROID\") return prestoDom({ elemType: type, parentType: elem.parentType }, props, children);\n\n  return prestoDom(type, props, children);\n}\n\nfunction getDomToRender(elem) {\n  var res = domAll(elem);\n  if (true) {\n    return JSON.stringify(res);\n  } else {}\n}\n\n// Not exported\nfunction cmdForAndroid(config, set, type) {\n  if (set) {\n    if (config.id) {\n      var obj = parseParams(type, config, \"set\");\n      var cmd = obj.runInUI.replace(\"this->setId\", \"set_view=ctx->findViewById\").replace(/this->/g, \"get_view->\");\n      cmd = cmd.replace(/PARAM_CTR_HOLDER[^;]*/g, \"get_view->getLayoutParams;\");\n      obj.runInUI = cmd;\n      return obj;\n    } else {\n      console.error(\"ID null, this is not supposed to happen. Debug this or/and raise a issue in bitbucket.\");\n    }\n    return {};\n  }\n\n  var _id = config.id;\n  var cmd = \"set_view=ctx->findViewById:i_\" + _id + \";\";\n  // var runInUI;\n  delete config.id;\n  config.root = \"true\";\n  var obj = parseParams(type, config, \"get\");\n  obj.runInUI = cmd + obj.runInUI + ';';\n  obj.id = _id;\n  return obj;\n}\n\nfunction getRunInUICmd(prop) {\n  var cmd;\n  if (true) {\n    cmd = cmdForAndroid(prop, true, \"linearLayout\").runInUI;\n  } else {}\n  return cmd;\n}\n\n// Not exported\nfunction applyProp(element, attribute, set) {\n  var prop = {\n    id: element.__ref.__id\n  };\n  prop[attribute.value0] = attribute.value1;\n\n  if (attribute.value0 == 'focus' && attribute.value1 == false && \"ANDROID\" == \"ANDROID\") {\n    return;\n  }\n\n  if (true) {\n    var cmd = cmdForAndroid(prop, set, element.type);\n    if (Android.updateProperties) {\n      Android.updateProperties(JSON.stringify(cmd));\n    } else {\n      Android.runInUI(cmd.runInUI, null);\n    }\n  } else {}\n  // Android.runInUI(parseParams(\"linearLayout\", prop, \"set\"));\n}\n\nfunction replaceView(element, attribute, removeProp) {\n  // console.log(\"REPLACE VIEW\", element.__ref.__id, element.props);\n  var props = helper.clone(element.props, null);\n  props.id = element.__ref.__id;\n  var rep;\n  var viewGroups = [\"linearLayout\", \"relativeLayout\", \"scrollView\", \"frameLayout\", \"horizontalScrollView\"];\n\n  if (viewGroups.indexOf(element.type) != -1) {\n    props.root = true;\n    rep = prestoDom(element.type, props, []);\n  } else if (true) {\n    rep = prestoDom({ elemType: element.type, parentType: element.parentNode.type }, props, []);\n  } else {}\n  if (true) {\n    Android.replaceView(JSON.stringify(rep), element.__ref.__id);\n  } else {}\n}\n\nfunction createPrestoElement() {\n  if (typeof window.__ui_id_sequence != \"undefined\" && window.__ui_id_sequence != null) {\n    return { __id: ++window.__ui_id_sequence };\n  } else {\n    window.__ui_id_sequence = typeof Android.getNewID == \"function\" ? parseInt(Android.getNewID()) * 1000000 : window.__PRESTO_ID;\n    return { __id: ++window.__ui_id_sequence };\n  }\n};\n\nfunction moveChild(child, parent, index) {\n  Android.moveView(child.__ref.__id, index);\n}\n\nfunction removeChild(child, parent, index) {\n  // console.log(\"Remove child :\", child.type);\n  Android.removeView(child.__ref.__id + \"\");\n}\n\nfunction addChild(child, parent, index) {\n  if (child.type == null) {\n    console.warn(\"child null\");\n  }\n  // console.log(\"Add child :\", child.__ref.__id, child.type);\n  var viewGroups = [\"linearLayout\", \"relativeLayout\", \"scrollView\", \"frameLayout\", \"horizontalScrollView\"];\n  if (true) {\n    if (viewGroups.indexOf(child.type) != -1) {\n      child.props.root = true;\n    } else {\n      child.parentType = parent.type;\n    }\n    Android.addViewToParent(parent.__ref.__id + \"\", JSON.stringify(domAll(child)), index, null, null);\n  } else {}\n}\n\nfunction addAttribute(element, attribute) {\n  // console.log(\"add attr :\", attribute);\n  element.props[attribute.value0] = attribute.value1;\n  applyProp(element, attribute, true);\n}\n\nfunction removeAttribute(element, attribute) {\n  // console.log(\"remove attr :\", attribute);\n  replaceView(element, attribute, true);\n}\n\nfunction updateAttribute(element, attribute) {\n  // console.log(\"update attr :\", attribute);\n  element.props[attribute.value0] = attribute.value1;\n\n  applyProp(element, attribute, false);\n}\n\nfunction insertDom(root, dom, cb) {\n  root.children.push(dom);\n  dom.parentNode = root;\n  dom.__ref = createPrestoElement();\n  window.N = root;\n\n  var rootId = window.__ROOTSCREEN.idSet.root;\n\n  dom.props.root = true;\n\n  var length = window.__ROOTSCREEN.idSet.child.push(dom.__ref.__id);\n\n  var callback = window.callbackMapper(executePostProcess(cb));\n  if (true) {\n    Android.addViewToParent(rootId + \"\", JSON.stringify(domAll(dom)), length - 1, callback, null);\n  } else {}\n\n  return dom.__ref.__id;\n}\n\nfunction executePostProcess(cb) {\n  return function () {\n    cb();\n\n    if (window.__dui_screen && window[\"afterRender\"]) {\n      for (var tag in window[\"afterRender\"][window.__dui_screen]) {\n        try {\n          window[\"afterRender\"][window.__dui_screen][tag]()();\n          window[\"afterRender\"][window.__dui_screen][\"executed\"] = true;\n        } catch (err) {\n          console.warn(err);\n        }\n      }\n    }\n\n    if (JBridge && JBridge.setShadow) {\n      for (var tag in window.shadowObject) {\n        JBridge.setShadow(window.shadowObject[tag][\"level\"], JSON.stringify(window.shadowObject[tag][\"viewId\"]), JSON.stringify(window.shadowObject[tag][\"backgroundColor\"]), JSON.stringify(window.shadowObject[tag][\"blurValue\"]), JSON.stringify(window.shadowObject[tag][\"shadowColor\"]), JSON.stringify(window.shadowObject[tag][\"dx\"]), JSON.stringify(window.shadowObject[tag][\"dy\"]), JSON.stringify(window.shadowObject[tag][\"spread\"]), JSON.stringify(window.shadowObject[tag][\"factor\"]));\n      }\n    }\n  };\n}\n\nmodule.exports = {\n  domAll: domAll,\n  getDomToRender: getDomToRender,\n  getRunInUICmd: getRunInUICmd,\n  replaceView: replaceView,\n  createPrestoElement: createPrestoElement,\n  moveChild: moveChild,\n  removeChild: removeChild,\n  addChild: addChild,\n  addAttribute: addAttribute,\n  removeAttribute: removeAttribute,\n  updateProperty: updateAttribute,\n  addProperty: addAttribute,\n  insertDom: insertDom\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/PrestoUIInterface.js\n");

/***/ }),

/***/ "./src/animations.js":
/*!***************************!*\
  !*** ./src/animations.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar BaseView = __webpack_require__(/*! ./baseView */ \"./src/baseView.js\");\nvar VIEW = new BaseView(null, null, {});\n\n// Object of types of animations available on screen change\nvar AnimationTypes = {\n  SLIDE: {\n    name: \"slide\",\n    handler: slideHandler\n  },\n  SLIDE_VERTICAL: {\n    name: \"slide_down\",\n    handler: slideDownHandler\n  },\n  SIMPLE: {\n    name: \"simple\",\n    handler: simpleHandler\n  }\n};\n\nvar DEFAULT_ANIMATION = AnimationTypes.SLIDE;\n\nfunction simpleHandler(fromId, toId, direction) {\n  var cmd = VIEW.cmd({\n    id: toId,\n    translationZ: ++window.ZIndex\n  });\n  return cmd;\n}\n\nfunction slideDownHandler(fromId, toId, direction) {\n  var container = VIEW.cmdContainer();\n  var cmd = void 0;\n\n  if (direction == 1) {\n    cmd = VIEW.cmd({\n      id: toId,\n      translationY: window.__HEIGHT,\n      a_duration: '300',\n      a_translationY: '0',\n      translationZ: ++window.ZIndex\n    });\n    container = container.addCmd(cmd);\n\n    cmd = VIEW.cmd({\n      id: fromId,\n      a_translationY: -0.2 * window.__HEIGHT,\n      a_duration: '300'\n    });\n    container = container.addCmd(cmd);\n\n    return container;\n  }\n\n  window.ZIndex++;\n  cmd = VIEW.cmd({\n    id: fromId,\n    translationY: 0,\n    a_translationY: window.__HEIGHT,\n    a_duration: '300',\n    translationZ: ++window.ZIndex\n  });\n  container = container.addCmd(cmd);\n\n  cmd = VIEW.cmd({\n    id: toId,\n    translationZ: window.ZIndex - 1,\n    a_translationY: '0',\n    translationY: -0.2 * window.__HEIGHT,\n    a_duration: '300'\n  });\n  container = container.addCmd(cmd);\n\n  return container;\n}\n\nfunction slideHandler(fromId, toId, direction) {\n  var container = VIEW.cmdContainer();\n  var cmd = void 0;\n  if (direction == 1) {\n    cmd = VIEW.cmd({\n      id: toId,\n      visibility: 'visible',\n      translationX: window.__WIDTH,\n      a_duration: '300',\n      a_translationX: '0',\n      translationZ: ++window.ZIndex\n    });\n    container = container.addCmd(cmd);\n    cmd = VIEW.cmd({\n      id: fromId,\n      translationX: '0',\n      visibility: 'visible',\n      a_duration: '300',\n      a_translationX: -.2 * window.__WIDTH + ''\n    });\n    container = container.addCmd(cmd);\n  }\n\n  if (direction == -1) {\n    window.ZIndex++;\n    cmd = VIEW.cmd({\n      id: fromId,\n      translationX: '0',\n      a_duration: '300',\n      a_translationX: window.__WIDTH,\n      translationZ: ++window.ZIndex\n    });\n    container = container.addCmd(cmd);\n\n    cmd = VIEW.cmd({\n      id: toId,\n      visibility: 'visible',\n      translationX: -.2 * window.__WIDTH + '',\n      a_duration: '300',\n      a_translationX: '0',\n      translationZ: window.ZIndex - 1\n    });\n    container = container.addCmd(cmd);\n  }\n\n  return container;\n}\n\n/*\n  Generic Handler for Animation\n  Arguments:\n    fromViewId: Number - Id of the view currently visible on the screen\n    toViewID: Number - Id of the view which has to be brought on the screen\n    ID: Number - Id of the view to be animated\n    animator: Obj - {name:string, handler:function}\n    direction: Number - Represents of the direction of the screen\n      -1 : Go back to the already rendered screen (right to left)\n       1 : Go to the new screen (left to right)\n*/\nfunction getAnimation(fromViewID, toViewId, direction, animator) {\n  if (!animator) animator = DEFAULT_ANIMATION;\n\n  if ((typeof animator === \"undefined\" ? \"undefined\" : _typeof(animator)) === \"object\" && typeof animator.handler === \"function\") return animator.handler(fromViewID, toViewId, direction);else console.log(new Error(\"Animation handler is not a function, type: \" + animator));\n}\n\nmodule.exports.types = AnimationTypes;\nmodule.exports.getAnimation = getAnimation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/animations.js\n");

/***/ }),

/***/ "./src/baseView.js":
/*!*************************!*\
  !*** ./src/baseView.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar merge = __webpack_require__(/*! ./helper */ \"./src/helper.js\").merge;\n\nString.prototype.addCmd = function (data) {\n  return this.concat(data);\n};\n\nArray.prototype.addCmd = function (data) {\n  this.push(data);\n  return this;\n};\n\nvar parseParams = void 0;\nif (true) parseParams = __webpack_require__(/*! ./helpers/android/parseParams */ \"./src/helpers/android/parseParams.js\");else {}\n\nvar BaseView = function () {\n  function BaseView(props, children) {\n    _classCallCheck(this, BaseView);\n\n    this.props = props || {};\n    this.children = children || [];\n\n    window.__SETFN = function (config) {\n      Android.runInUI(this.set(config), null);\n    }.bind(this);\n\n    this.idSet = {};\n\n    if (this.props.id) {\n      this.idSet[\"id\"] = this.props.id;\n    } else {\n      this.props.id = this.id(\"id\");\n    }\n\n    if (this.props._ref) {\n      this.props._ref(this);\n    }\n  }\n\n  _createClass(BaseView, [{\n    key: \"resolveChildren\",\n    value: function resolveChildren() {\n      return this.children.map(function (child) {\n        return child.render();\n      });\n    }\n  }, {\n    key: \"findRecurse\",\n    value: function findRecurse(obj, selector) {\n      var children = obj.children;\n\n      for (var i = 0; i < children.length; i++) {\n        if (children[i].displayName && children[i].displayName == selector) {\n          this.foundChildren.push(children[i]);\n        }\n\n        if (children[i].children && children[i].children.length) this.findRecurse(children[i], selector);\n      }\n\n      return;\n    }\n  }, {\n    key: \"find\",\n    value: function find(selector, obj) {\n      this.foundChildren = [];\n\n      if (!obj) this.findRecurse(this.layout, selector);else this.findRecurse(obj, selector);\n\n      return this.foundChildren;\n    }\n  }, {\n    key: \"id\",\n    value: function id(name) {\n      if (!this.idSet[name]) {\n        window.__ID++;\n        this.idSet[name] = window.__ID;\n      }\n\n      return this.idSet[name];\n    }\n  }, {\n    key: \"setIds\",\n    value: function setIds(arr) {\n      if (!this.idSet) this.idSet = {};\n\n      for (var i = 0; i < arr.length; i++) {\n        if (!this.idSet[arr[i]]) {\n          window.__ID++;\n          this.idSet[arr[i]] = window.__ID + '';\n        }\n      }\n    }\n  }, {\n    key: \"handleSpecialChars\",\n    value: function handleSpecialChars(value) {\n      value = value.indexOf(',') > -1 ? value.replace(/\\,/g, '\\\\\\\\,') : value;\n      value = value.indexOf(':') > -1 ? value.replace(/\\:/g, '\\\\\\\\:') : value;\n      value = value.indexOf('=') > -1 ? value.replace(/\\=/g, '\\\\\\\\=') : value;\n      value = value.indexOf(';') > -1 ? value.replace(/\\;/g, '\\\\\\\\;') : value;\n\n      return value;\n    }\n  }, {\n    key: \"cmdForAndroid\",\n    value: function cmdForAndroid(config) {\n      var cmd = \"set_view=ctx->findViewById:i_\" + config.id + \";\";\n      var runInUI;\n\n      if (config.toast) {\n        cmd = \"set_TOAST=android.widget.Toast->makeText:ctx_ctx,cs_\" + this.handleSpecialChars(config.text) + \",i_\" + (config.duration == \"short\" ? 0 : 1) + \";get_TOAST->show\";\n      } else if (config && Object.keys(config).length) {\n        delete config.id;\n\n        config.root = \"true\";\n        runInUI = parseParams(\"linearLayout\", config, \"get\").runInUI;\n\n        cmd += runInUI + ';';\n      }\n\n      return cmd;\n    }\n  }, {\n    key: \"cmdContainer\",\n    value: function cmdContainer() {\n      if (true) return \"\";\n      return [];\n    }\n  }, {\n    key: \"cmdForWeb\",\n    value: function cmdForWeb(config) {\n      if (Object.keys(config).length) return parseParams(\"linearLayout\", config, \"set\");\n    }\n  }, {\n    key: \"cmd\",\n    value: function cmd(config) {\n      if (true) return this.cmdForAndroid(config);else {}\n      return config;\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(id, jsx, index, fn, replaceChild) {\n      var proxyFnName;\n      if (!replaceChild) {\n        replaceChild = false;\n      }\n\n      if (fn) {\n        proxyFnName = 'F' + window.__FN_INDEX;\n        window.__PROXY_FN[proxyFnName] = fn;\n        window.__FN_INDEX++;\n      }\n\n      jsx =  false ? undefined : JSON.stringify(jsx);\n\n      if (proxyFnName) Android.addViewToParent(id, jsx, index, proxyFnName, replaceChild);else Android.addViewToParent(id, jsx, index, null, replaceChild);\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(jsx) {\n      if (false) {}\n\n      return JSON.stringify(jsx);\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps(props) {\n      this.props = merge(this.props, props);\n      var oldContainerId = this.layout.idSet.id;\n      var layout = this.render();\n      for (var i = 0; i < layout.children.length; i++) {\n        if (i == 0) this.replaceChild(oldContainerId, layout.children[i], i);else this.appendChild(oldContainerId, layout.children[i], i);\n      }\n      this.layout.idSet.id = oldContainerId;\n    }\n  }, {\n    key: \"removeView\",\n    value: function removeView(id) {\n      if (__OS == \"WEB\") return Android.removeView(id);\n      return \"set_VIEW=ctx->findViewById:i_\" + id + \";set_PARENT=get_VIEW->getParent;get_PARENT->removeView:get_VIEW;\";\n    }\n  }, {\n    key: \"removeChildren\",\n    value: function removeChildren(id) {\n      if (__OS == \"WEB\") return Android.removeChildren(id);\n      return \"set_VIEW=ctx->findViewById:i_\" + id + \";get_VIEW->removeAllViews;\";\n    }\n  }, {\n    key: \"replaceChild\",\n    value: function replaceChild(id, jsx, index, fn) {\n      this.appendChild(id, jsx, index, fn, true);\n    }\n  }]);\n\n  return BaseView;\n}();\n\nmodule.exports = BaseView;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZVZpZXcuanM/YTY0NCJdLCJuYW1lcyI6WyJtZXJnZSIsInJlcXVpcmUiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJhZGRDbWQiLCJkYXRhIiwiY29uY2F0IiwiQXJyYXkiLCJwdXNoIiwicGFyc2VQYXJhbXMiLCJ3aW5kb3ciLCJCYXNlVmlldyIsInByb3BzIiwiY2hpbGRyZW4iLCJfX1NFVEZOIiwiY29uZmlnIiwiQW5kcm9pZCIsInJ1bkluVUkiLCJzZXQiLCJiaW5kIiwiaWRTZXQiLCJpZCIsIl9yZWYiLCJtYXAiLCJjaGlsZCIsInJlbmRlciIsIm9iaiIsInNlbGVjdG9yIiwiaSIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiZm91bmRDaGlsZHJlbiIsImZpbmRSZWN1cnNlIiwibGF5b3V0IiwibmFtZSIsIl9fSUQiLCJhcnIiLCJ2YWx1ZSIsImluZGV4T2YiLCJyZXBsYWNlIiwiY21kIiwidG9hc3QiLCJoYW5kbGVTcGVjaWFsQ2hhcnMiLCJ0ZXh0IiwiZHVyYXRpb24iLCJPYmplY3QiLCJrZXlzIiwicm9vdCIsImNtZEZvckFuZHJvaWQiLCJqc3giLCJpbmRleCIsImZuIiwicmVwbGFjZUNoaWxkIiwicHJveHlGbk5hbWUiLCJfX0ZOX0lOREVYIiwiX19QUk9YWV9GTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJhZGRWaWV3VG9QYXJlbnQiLCJvbGRDb250YWluZXJJZCIsImFwcGVuZENoaWxkIiwiX19PUyIsInJlbW92ZVZpZXciLCJyZW1vdmVDaGlsZHJlbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLElBQU1BLFFBQVNDLG1CQUFPQSxDQUFDLGlDQUFSLEVBQW9CRCxLQUFuQzs7QUFFQUUsT0FBT0MsU0FBUCxDQUFpQkMsTUFBakIsR0FBMEIsVUFBU0MsSUFBVCxFQUFlO0FBQ3ZDLFNBQU8sS0FBS0MsTUFBTCxDQUFZRCxJQUFaLENBQVA7QUFDRCxDQUZEOztBQUlBRSxNQUFNSixTQUFOLENBQWdCQyxNQUFoQixHQUF5QixVQUFTQyxJQUFULEVBQWU7QUFDdEMsT0FBS0csSUFBTCxDQUFVSCxJQUFWO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FIRDs7QUFLQSxJQUFJSSxvQkFBSjtBQUNBLElBQUlDLElBQUosRUFDRUQsY0FBY1IsbUJBQU9BLENBQUMsMkVBQVIsQ0FBZCxDQURGLEtBRUssRUFHSDs7SUFFSVUsUTtBQUNKLG9CQUFZQyxLQUFaLEVBQW1CQyxRQUFuQixFQUE2QjtBQUFBOztBQUMzQixTQUFLRCxLQUFMLEdBQWFBLFNBQVMsRUFBdEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxZQUFZLEVBQTVCOztBQUVBSCxXQUFPSSxPQUFQLEdBQWlCLFVBQVVDLE1BQVYsRUFBa0I7QUFDakNDLGNBQVFDLE9BQVIsQ0FDRSxLQUFLQyxHQUFMLENBQVNILE1BQVQsQ0FERixFQUVFLElBRkY7QUFJRCxLQUxnQixDQUtmSSxJQUxlLENBS1YsSUFMVSxDQUFqQjs7QUFPQSxTQUFLQyxLQUFMLEdBQWEsRUFBYjs7QUFFQSxRQUFJLEtBQUtSLEtBQUwsQ0FBV1MsRUFBZixFQUFtQjtBQUNqQixXQUFLRCxLQUFMLENBQVcsSUFBWCxJQUFtQixLQUFLUixLQUFMLENBQVdTLEVBQTlCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS1QsS0FBTCxDQUFXUyxFQUFYLEdBQWdCLEtBQUtBLEVBQUwsQ0FBUSxJQUFSLENBQWhCO0FBQ0Q7O0FBRUQsUUFBSSxLQUFLVCxLQUFMLENBQVdVLElBQWYsRUFBcUI7QUFDbkIsV0FBS1YsS0FBTCxDQUFXVSxJQUFYLENBQWdCLElBQWhCO0FBQ0Q7QUFDRjs7OztzQ0FFaUI7QUFDaEIsYUFBTyxLQUFLVCxRQUFMLENBQWNVLEdBQWQsQ0FBa0IsVUFBU0MsS0FBVCxFQUFnQjtBQUN2QyxlQUFPQSxNQUFNQyxNQUFOLEVBQVA7QUFDRCxPQUZNLENBQVA7QUFHRDs7O2dDQUVXQyxHLEVBQUtDLFEsRUFBVTtBQUN6QixVQUFJZCxXQUFXYSxJQUFJYixRQUFuQjs7QUFFQSxXQUFLLElBQUllLElBQUksQ0FBYixFQUFnQkEsSUFBSWYsU0FBU2dCLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN4QyxZQUFJZixTQUFTZSxDQUFULEVBQVlFLFdBQVosSUFBMkJqQixTQUFTZSxDQUFULEVBQVlFLFdBQVosSUFBMkJILFFBQTFELEVBQW9FO0FBQ2xFLGVBQUtJLGFBQUwsQ0FBbUJ2QixJQUFuQixDQUF3QkssU0FBU2UsQ0FBVCxDQUF4QjtBQUNEOztBQUVELFlBQUlmLFNBQVNlLENBQVQsRUFBWWYsUUFBWixJQUF3QkEsU0FBU2UsQ0FBVCxFQUFZZixRQUFaLENBQXFCZ0IsTUFBakQsRUFDRSxLQUFLRyxXQUFMLENBQWlCbkIsU0FBU2UsQ0FBVCxDQUFqQixFQUE4QkQsUUFBOUI7QUFDSDs7QUFFRDtBQUNEOzs7eUJBRUlBLFEsRUFBVUQsRyxFQUFLO0FBQ2xCLFdBQUtLLGFBQUwsR0FBcUIsRUFBckI7O0FBRUEsVUFBSSxDQUFDTCxHQUFMLEVBQ0UsS0FBS00sV0FBTCxDQUFpQixLQUFLQyxNQUF0QixFQUE4Qk4sUUFBOUIsRUFERixLQUdFLEtBQUtLLFdBQUwsQ0FBaUJOLEdBQWpCLEVBQXNCQyxRQUF0Qjs7QUFFRixhQUFPLEtBQUtJLGFBQVo7QUFDRDs7O3VCQUVFRyxJLEVBQU07QUFDUCxVQUFJLENBQUMsS0FBS2QsS0FBTCxDQUFXYyxJQUFYLENBQUwsRUFBdUI7QUFDckJ4QixlQUFPeUIsSUFBUDtBQUNBLGFBQUtmLEtBQUwsQ0FBV2MsSUFBWCxJQUFtQnhCLE9BQU95QixJQUExQjtBQUNEOztBQUVELGFBQU8sS0FBS2YsS0FBTCxDQUFXYyxJQUFYLENBQVA7QUFDRDs7OzJCQUVNRSxHLEVBQUs7QUFDVixVQUFJLENBQUMsS0FBS2hCLEtBQVYsRUFDRSxLQUFLQSxLQUFMLEdBQWEsRUFBYjs7QUFFRixXQUFLLElBQUlRLElBQUksQ0FBYixFQUFnQkEsSUFBSVEsSUFBSVAsTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO0FBQ25DLFlBQUksQ0FBQyxLQUFLUixLQUFMLENBQVdnQixJQUFJUixDQUFKLENBQVgsQ0FBTCxFQUF5QjtBQUN2QmxCLGlCQUFPeUIsSUFBUDtBQUNBLGVBQUtmLEtBQUwsQ0FBV2dCLElBQUlSLENBQUosQ0FBWCxJQUFxQmxCLE9BQU95QixJQUFQLEdBQWMsRUFBbkM7QUFDRDtBQUNGO0FBQ0Y7Ozt1Q0FFa0JFLEssRUFBTztBQUN4QkEsY0FBUUEsTUFBTUMsT0FBTixDQUFjLEdBQWQsSUFBcUIsQ0FBQyxDQUF0QixHQUEwQkQsTUFBTUUsT0FBTixDQUFjLEtBQWQsRUFBcUIsT0FBckIsQ0FBMUIsR0FBMERGLEtBQWxFO0FBQ0FBLGNBQVFBLE1BQU1DLE9BQU4sQ0FBYyxHQUFkLElBQXFCLENBQUMsQ0FBdEIsR0FBMEJELE1BQU1FLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLE9BQXJCLENBQTFCLEdBQTBERixLQUFsRTtBQUNBQSxjQUFRQSxNQUFNQyxPQUFOLENBQWMsR0FBZCxJQUFxQixDQUFDLENBQXRCLEdBQTBCRCxNQUFNRSxPQUFOLENBQWMsS0FBZCxFQUFxQixPQUFyQixDQUExQixHQUEwREYsS0FBbEU7QUFDQUEsY0FBUUEsTUFBTUMsT0FBTixDQUFjLEdBQWQsSUFBcUIsQ0FBQyxDQUF0QixHQUEwQkQsTUFBTUUsT0FBTixDQUFjLEtBQWQsRUFBcUIsT0FBckIsQ0FBMUIsR0FBMERGLEtBQWxFOztBQUVBLGFBQU9BLEtBQVA7QUFDRDs7O2tDQUVhdEIsTSxFQUFRO0FBQ3BCLFVBQUl5QixNQUFNLGtDQUFrQ3pCLE9BQU9NLEVBQXpDLEdBQThDLEdBQXhEO0FBQ0EsVUFBSUosT0FBSjs7QUFFQSxVQUFJRixPQUFPMEIsS0FBWCxFQUFrQjtBQUNoQkQsY0FBTSx5REFBeUQsS0FBS0Usa0JBQUwsQ0FDM0QzQixPQUFPNEIsSUFEb0QsQ0FBekQsR0FDYSxLQURiLElBQ3NCNUIsT0FBTzZCLFFBQVAsSUFBbUIsT0FBbkIsR0FBNkIsQ0FBN0IsR0FBaUMsQ0FEdkQsSUFFSixrQkFGRjtBQUdELE9BSkQsTUFJTyxJQUFJN0IsVUFBVThCLE9BQU9DLElBQVAsQ0FBWS9CLE1BQVosRUFBb0JjLE1BQWxDLEVBQTBDO0FBQy9DLGVBQU9kLE9BQU9NLEVBQWQ7O0FBRUFOLGVBQU9nQyxJQUFQLEdBQWMsTUFBZDtBQUNBOUIsa0JBQVVSLFlBQVksY0FBWixFQUE0Qk0sTUFBNUIsRUFBb0MsS0FBcEMsRUFBMkNFLE9BQXJEOztBQUVBdUIsZUFBT3ZCLFVBQVUsR0FBakI7QUFDRDs7QUFFRCxhQUFPdUIsR0FBUDtBQUNEOzs7bUNBRWM7QUFDYixVQUFJOUIsSUFBSixFQUNFLE9BQU8sRUFBUDtBQUNGLGFBQU8sRUFBUDtBQUNEOzs7OEJBRVNLLE0sRUFBUTtBQUNoQixVQUFJOEIsT0FBT0MsSUFBUCxDQUFZL0IsTUFBWixFQUFvQmMsTUFBeEIsRUFDRSxPQUFPcEIsWUFBWSxjQUFaLEVBQTRCTSxNQUE1QixFQUFvQyxLQUFwQyxDQUFQO0FBQ0g7Ozt3QkFFR0EsTSxFQUFRO0FBQ1YsVUFBSUwsSUFBSixFQUNFLE9BQU8sS0FBS3NDLGFBQUwsQ0FBbUJqQyxNQUFuQixDQUFQLENBREYsS0FFSyxFQUNIO0FBQ0YsYUFBT0EsTUFBUDtBQUNEOzs7Z0NBRVdNLEUsRUFBSTRCLEcsRUFBS0MsSyxFQUFPQyxFLEVBQUlDLFksRUFBYztBQUM1QyxVQUFJQyxXQUFKO0FBQ0EsVUFBSSxDQUFDRCxZQUFMLEVBQW1CO0FBQ2pCQSx1QkFBZSxLQUFmO0FBQ0Q7O0FBRUQsVUFBSUQsRUFBSixFQUFRO0FBQ05FLHNCQUFjLE1BQU0zQyxPQUFPNEMsVUFBM0I7QUFDQTVDLGVBQU82QyxVQUFQLENBQWtCRixXQUFsQixJQUFpQ0YsRUFBakM7QUFDQXpDLGVBQU80QyxVQUFQO0FBQ0Q7O0FBRURMLFlBQU92QyxNQUFELEdBQTZCdUMsU0FBN0IsR0FBbUNPLEtBQUtDLFNBQUwsQ0FBZVIsR0FBZixDQUF6Qzs7QUFFQSxVQUFJSSxXQUFKLEVBQ0VyQyxRQUFRMEMsZUFBUixDQUF3QnJDLEVBQXhCLEVBQTRCNEIsR0FBNUIsRUFBaUNDLEtBQWpDLEVBQXdDRyxXQUF4QyxFQUFxREQsWUFBckQsRUFERixLQUdFcEMsUUFBUTBDLGVBQVIsQ0FBd0JyQyxFQUF4QixFQUE0QjRCLEdBQTVCLEVBQWlDQyxLQUFqQyxFQUF3QyxJQUF4QyxFQUE4Q0UsWUFBOUM7QUFDSDs7OzRCQUVPSCxHLEVBQUs7QUFDWCxVQUFJdkMsS0FBSixFQUNFOztBQUVGLGFBQU84QyxLQUFLQyxTQUFMLENBQWVSLEdBQWYsQ0FBUDtBQUNEOzs7Z0NBRVdyQyxLLEVBQU87QUFDakIsV0FBS0EsS0FBTCxHQUFhWixNQUFNLEtBQUtZLEtBQVgsRUFBa0JBLEtBQWxCLENBQWI7QUFDQSxVQUFNK0MsaUJBQWlCLEtBQUsxQixNQUFMLENBQVliLEtBQVosQ0FBa0JDLEVBQXpDO0FBQ0EsVUFBTVksU0FBUyxLQUFLUixNQUFMLEVBQWY7QUFDQSxXQUFLLElBQUlHLElBQUUsQ0FBWCxFQUFjQSxJQUFFSyxPQUFPcEIsUUFBUCxDQUFnQmdCLE1BQWhDLEVBQXdDRCxHQUF4QyxFQUE2QztBQUMzQyxZQUFJQSxLQUFHLENBQVAsRUFBVSxLQUFLd0IsWUFBTCxDQUFrQk8sY0FBbEIsRUFBa0MxQixPQUFPcEIsUUFBUCxDQUFnQmUsQ0FBaEIsQ0FBbEMsRUFBc0RBLENBQXRELEVBQVYsS0FDSyxLQUFLZ0MsV0FBTCxDQUFpQkQsY0FBakIsRUFBaUMxQixPQUFPcEIsUUFBUCxDQUFnQmUsQ0FBaEIsQ0FBakMsRUFBcURBLENBQXJEO0FBQ047QUFDRCxXQUFLSyxNQUFMLENBQVliLEtBQVosQ0FBa0JDLEVBQWxCLEdBQXVCc0MsY0FBdkI7QUFDRDs7OytCQUVVdEMsRSxFQUFJO0FBQ2IsVUFBSXdDLFFBQVEsS0FBWixFQUNFLE9BQU83QyxRQUFROEMsVUFBUixDQUFtQnpDLEVBQW5CLENBQVA7QUFDRixhQUFPLGtDQUFrQ0EsRUFBbEMsR0FDTCxrRUFERjtBQUVEOzs7bUNBRWNBLEUsRUFBSTtBQUNqQixVQUFJd0MsUUFBUSxLQUFaLEVBQ0UsT0FBTzdDLFFBQVErQyxjQUFSLENBQXVCMUMsRUFBdkIsQ0FBUDtBQUNGLGFBQU8sa0NBQWtDQSxFQUFsQyxHQUNMLDRCQURGO0FBRUQ7OztpQ0FFWUEsRSxFQUFJNEIsRyxFQUFLQyxLLEVBQU9DLEUsRUFBSTtBQUMvQixXQUFLUyxXQUFMLENBQWlCdkMsRUFBakIsRUFBcUI0QixHQUFyQixFQUEwQkMsS0FBMUIsRUFBaUNDLEVBQWpDLEVBQXFDLElBQXJDO0FBQ0Q7Ozs7OztBQUdIYSxPQUFPQyxPQUFQLEdBQWlCdEQsUUFBakIiLCJmaWxlIjoiLi9zcmMvYmFzZVZpZXcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBcIkpVU1BBWSBUZWNobm9sb2dpZXNcIlxuKiBKVVNQQVkgVGVjaG5vbG9naWVzIFB2dC4gTHRkLiBbaHR0cHM6Ly93d3cuanVzcGF5LmluXVxuKlxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBKVVNQQVkgUGxhdGZvcm0uXG4qXG4qIEpVU1BBWSBQbGF0Zm9ybSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4qIGl0IGZvciBvbmx5IGVkdWNhdGlvbmFsIHB1cnBvc2VzIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsXG4qIFB1YmxpYyBMaWNlbnNlIChHTlUgQUdQTCkgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sXG4qIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4qIEZvciBFbnRlcnByaXNlL0NvbW1lcmljYWwgbGljZW5zZXMsIGNvbnRhY3QgPGluZm9AanVzcGF5LmluPi5cbipcbiogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4qIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4qIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRoZSBlbmQgdXNlciB3aWxsXG4qIGJlIGxpYWJsZSBmb3IgYWxsIGRhbWFnZXMgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGljaCBpcyBjYXVzZWQgYnkgdGhlXG4qIEFCVVNFIG9mIHRoZSBMSUNFTlNFRCBTT0ZUV0FSRSBhbmQgc2hhbGwgSU5ERU1OSUZZIEpVU1BBWSBmb3Igc3VjaFxuKiBkYW1hZ2VzLCBjbGFpbXMsIGNvc3QsIGluY2x1ZGluZyByZWFzb25hYmxlIGF0dG9ybmV5IGZlZSBjbGFpbWVkIG9uIEp1c3BheS5cbiogVGhlIGVuZCB1c2VyIGhhcyBOTyByaWdodCB0byBjbGFpbSBhbnkgaW5kZW1uaWZpY2F0aW9uIGJhc2VkIG9uIGl0cyB1c2Vcbiogb2YgTGljZW5zZWQgU29mdHdhcmUuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4qXG4qIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC5odG1sPi5cbiovXG5cbmNvbnN0IG1lcmdlID0gIHJlcXVpcmUoXCIuL2hlbHBlclwiKS5tZXJnZTtcblxuU3RyaW5nLnByb3RvdHlwZS5hZGRDbWQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHJldHVybiB0aGlzLmNvbmNhdChkYXRhKTtcbn07XG5cbkFycmF5LnByb3RvdHlwZS5hZGRDbWQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMucHVzaChkYXRhKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5sZXQgcGFyc2VQYXJhbXM7XG5pZiAod2luZG93Ll9fT1MgPT0gXCJBTkRST0lEXCIpXG4gIHBhcnNlUGFyYW1zID0gcmVxdWlyZSgnLi9oZWxwZXJzL2FuZHJvaWQvcGFyc2VQYXJhbXMnKTtcbmVsc2UgaWYgKHdpbmRvdy5fX09TID09IFwiV0VCXCIpXG4gIHBhcnNlUGFyYW1zID0gcmVxdWlyZSgnLi9oZWxwZXJzL3dlYi9wYXJzZVBhcmFtcycpO1xuZWxzZVxuICBwYXJzZVBhcmFtcyA9IHJlcXVpcmUoJy4vaGVscGVycy9pb3MvcGFyc2VQYXJhbXMnKTtcblxuY2xhc3MgQmFzZVZpZXcge1xuICBjb25zdHJ1Y3Rvcihwcm9wcywgY2hpbGRyZW4pIHtcbiAgICB0aGlzLnByb3BzID0gcHJvcHMgfHwge307XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuIHx8IFtdO1xuXG4gICAgd2luZG93Ll9fU0VURk4gPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICBBbmRyb2lkLnJ1bkluVUkoXG4gICAgICAgIHRoaXMuc2V0KGNvbmZpZyksXG4gICAgICAgIG51bGxcbiAgICAgIClcbiAgICB9LmJpbmQodGhpcylcblxuICAgIHRoaXMuaWRTZXQgPSB7fTtcblxuICAgIGlmICh0aGlzLnByb3BzLmlkKSB7XG4gICAgICB0aGlzLmlkU2V0W1wiaWRcIl0gPSB0aGlzLnByb3BzLmlkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BzLmlkID0gdGhpcy5pZChcImlkXCIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLl9yZWYpIHtcbiAgICAgIHRoaXMucHJvcHMuX3JlZih0aGlzKTtcbiAgICB9XG4gIH1cblxuICByZXNvbHZlQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQucmVuZGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICBmaW5kUmVjdXJzZShvYmosIHNlbGVjdG9yKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gb2JqLmNoaWxkcmVuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGNoaWxkcmVuW2ldLmRpc3BsYXlOYW1lICYmIGNoaWxkcmVuW2ldLmRpc3BsYXlOYW1lID09IHNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuZm91bmRDaGlsZHJlbi5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkcmVuW2ldLmNoaWxkcmVuICYmIGNoaWxkcmVuW2ldLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgdGhpcy5maW5kUmVjdXJzZShjaGlsZHJlbltpXSwgc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpbmQoc2VsZWN0b3IsIG9iaikge1xuICAgIHRoaXMuZm91bmRDaGlsZHJlbiA9IFtdO1xuXG4gICAgaWYgKCFvYmopXG4gICAgICB0aGlzLmZpbmRSZWN1cnNlKHRoaXMubGF5b3V0LCBzZWxlY3Rvcik7XG4gICAgZWxzZVxuICAgICAgdGhpcy5maW5kUmVjdXJzZShvYmosIHNlbGVjdG9yKTtcblxuICAgIHJldHVybiB0aGlzLmZvdW5kQ2hpbGRyZW47XG4gIH1cblxuICBpZChuYW1lKSB7XG4gICAgaWYgKCF0aGlzLmlkU2V0W25hbWVdKSB7XG4gICAgICB3aW5kb3cuX19JRCsrO1xuICAgICAgdGhpcy5pZFNldFtuYW1lXSA9IHdpbmRvdy5fX0lEO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5pZFNldFtuYW1lXTtcbiAgfVxuXG4gIHNldElkcyhhcnIpIHtcbiAgICBpZiAoIXRoaXMuaWRTZXQpXG4gICAgICB0aGlzLmlkU2V0ID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLmlkU2V0W2FycltpXV0pIHtcbiAgICAgICAgd2luZG93Ll9fSUQrKztcbiAgICAgICAgdGhpcy5pZFNldFthcnJbaV1dID0gd2luZG93Ll9fSUQgKyAnJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVTcGVjaWFsQ2hhcnModmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmluZGV4T2YoJywnKSA+IC0xID8gdmFsdWUucmVwbGFjZSgvXFwsL2csICdcXFxcXFxcXCwnKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gdmFsdWUuaW5kZXhPZignOicpID4gLTEgPyB2YWx1ZS5yZXBsYWNlKC9cXDovZywgJ1xcXFxcXFxcOicpIDogdmFsdWU7XG4gICAgdmFsdWUgPSB2YWx1ZS5pbmRleE9mKCc9JykgPiAtMSA/IHZhbHVlLnJlcGxhY2UoL1xcPS9nLCAnXFxcXFxcXFw9JykgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IHZhbHVlLmluZGV4T2YoJzsnKSA+IC0xID8gdmFsdWUucmVwbGFjZSgvXFw7L2csICdcXFxcXFxcXDsnKSA6IHZhbHVlO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgY21kRm9yQW5kcm9pZChjb25maWcpIHtcbiAgICB2YXIgY21kID0gXCJzZXRfdmlldz1jdHgtPmZpbmRWaWV3QnlJZDppX1wiICsgY29uZmlnLmlkICsgXCI7XCI7XG4gICAgdmFyIHJ1bkluVUk7XG5cbiAgICBpZiAoY29uZmlnLnRvYXN0KSB7XG4gICAgICBjbWQgPSBcInNldF9UT0FTVD1hbmRyb2lkLndpZGdldC5Ub2FzdC0+bWFrZVRleHQ6Y3R4X2N0eCxjc19cIiArIHRoaXMuaGFuZGxlU3BlY2lhbENoYXJzKFxuICAgICAgICAgIGNvbmZpZy50ZXh0KSArIFwiLGlfXCIgKyAoY29uZmlnLmR1cmF0aW9uID09IFwic2hvcnRcIiA/IDAgOiAxKSArXG4gICAgICAgIFwiO2dldF9UT0FTVC0+c2hvd1wiO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnICYmIE9iamVjdC5rZXlzKGNvbmZpZykubGVuZ3RoKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmlkO1xuXG4gICAgICBjb25maWcucm9vdCA9IFwidHJ1ZVwiO1xuICAgICAgcnVuSW5VSSA9IHBhcnNlUGFyYW1zKFwibGluZWFyTGF5b3V0XCIsIGNvbmZpZywgXCJnZXRcIikucnVuSW5VSTtcblxuICAgICAgY21kICs9IHJ1bkluVUkgKyAnOyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNtZDtcbiAgfVxuXG4gIGNtZENvbnRhaW5lcigpIHtcbiAgICBpZiAod2luZG93Ll9fT1MgPT0gXCJBTkRST0lEXCIpXG4gICAgICByZXR1cm4gXCJcIjtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjbWRGb3JXZWIoY29uZmlnKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGNvbmZpZykubGVuZ3RoKVxuICAgICAgcmV0dXJuIHBhcnNlUGFyYW1zKFwibGluZWFyTGF5b3V0XCIsIGNvbmZpZywgXCJzZXRcIik7XG4gIH1cblxuICBjbWQoY29uZmlnKSB7XG4gICAgaWYgKHdpbmRvdy5fX09TID09IFwiQU5EUk9JRFwiKVxuICAgICAgcmV0dXJuIHRoaXMuY21kRm9yQW5kcm9pZChjb25maWcpO1xuICAgIGVsc2UgaWYgKHdpbmRvdy5fX09TID09IFwiV0VCXCIpXG4gICAgICByZXR1cm4gdGhpcy5jbWRGb3JXZWIoY29uZmlnKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgYXBwZW5kQ2hpbGQoaWQsIGpzeCwgaW5kZXgsIGZuLCByZXBsYWNlQ2hpbGQpIHtcbiAgICB2YXIgcHJveHlGbk5hbWU7XG4gICAgaWYgKCFyZXBsYWNlQ2hpbGQpIHtcbiAgICAgIHJlcGxhY2VDaGlsZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChmbikge1xuICAgICAgcHJveHlGbk5hbWUgPSAnRicgKyB3aW5kb3cuX19GTl9JTkRFWDtcbiAgICAgIHdpbmRvdy5fX1BST1hZX0ZOW3Byb3h5Rm5OYW1lXSA9IGZuO1xuICAgICAgd2luZG93Ll9fRk5fSU5ERVgrKztcbiAgICB9XG5cbiAgICBqc3ggPSAod2luZG93Ll9fT1MgIT0gXCJBTkRST0lEXCIpID8ganN4IDogSlNPTi5zdHJpbmdpZnkoanN4KTtcblxuICAgIGlmIChwcm94eUZuTmFtZSlcbiAgICAgIEFuZHJvaWQuYWRkVmlld1RvUGFyZW50KGlkLCBqc3gsIGluZGV4LCBwcm94eUZuTmFtZSwgcmVwbGFjZUNoaWxkKTtcbiAgICBlbHNlXG4gICAgICBBbmRyb2lkLmFkZFZpZXdUb1BhcmVudChpZCwganN4LCBpbmRleCwgbnVsbCwgcmVwbGFjZUNoaWxkKTtcbiAgfVxuXG4gIGdldFZpZXcoanN4KSB7XG4gICAgaWYgKHdpbmRvdy5fX09TICE9IFwiQU5EUk9JRFwiKVxuICAgICAgcmV0dXJuIGpzeDtcblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShqc3gpO1xuICB9XG5cbiAgdXBkYXRlUHJvcHMocHJvcHMpIHtcbiAgICB0aGlzLnByb3BzID0gbWVyZ2UodGhpcy5wcm9wcywgcHJvcHMpO1xuICAgIGNvbnN0IG9sZENvbnRhaW5lcklkID0gdGhpcy5sYXlvdXQuaWRTZXQuaWQ7XG4gICAgY29uc3QgbGF5b3V0ID0gdGhpcy5yZW5kZXIoKTtcbiAgICBmb3IgKGxldCBpPTA7IGk8bGF5b3V0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaT09MCkgdGhpcy5yZXBsYWNlQ2hpbGQob2xkQ29udGFpbmVySWQsIGxheW91dC5jaGlsZHJlbltpXSwgaSk7XG4gICAgICBlbHNlIHRoaXMuYXBwZW5kQ2hpbGQob2xkQ29udGFpbmVySWQsIGxheW91dC5jaGlsZHJlbltpXSwgaSk7XG4gICAgfVxuICAgIHRoaXMubGF5b3V0LmlkU2V0LmlkID0gb2xkQ29udGFpbmVySWQ7XG4gIH1cblxuICByZW1vdmVWaWV3KGlkKSB7XG4gICAgaWYgKF9fT1MgPT0gXCJXRUJcIilcbiAgICAgIHJldHVybiBBbmRyb2lkLnJlbW92ZVZpZXcoaWQpO1xuICAgIHJldHVybiBcInNldF9WSUVXPWN0eC0+ZmluZFZpZXdCeUlkOmlfXCIgKyBpZCArXG4gICAgICBcIjtzZXRfUEFSRU5UPWdldF9WSUVXLT5nZXRQYXJlbnQ7Z2V0X1BBUkVOVC0+cmVtb3ZlVmlldzpnZXRfVklFVztcIlxuICB9XG5cbiAgcmVtb3ZlQ2hpbGRyZW4oaWQpIHtcbiAgICBpZiAoX19PUyA9PSBcIldFQlwiKVxuICAgICAgcmV0dXJuIEFuZHJvaWQucmVtb3ZlQ2hpbGRyZW4oaWQpO1xuICAgIHJldHVybiBcInNldF9WSUVXPWN0eC0+ZmluZFZpZXdCeUlkOmlfXCIgKyBpZCArXG4gICAgICBcIjtnZXRfVklFVy0+cmVtb3ZlQWxsVmlld3M7XCJcbiAgfVxuXG4gIHJlcGxhY2VDaGlsZChpZCwganN4LCBpbmRleCwgZm4pIHtcbiAgICB0aGlzLmFwcGVuZENoaWxkKGlkLCBqc3gsIGluZGV4LCBmbiwgdHJ1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlVmlldzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/baseView.js\n");

/***/ }),

/***/ "./src/doms/android.js":
/*!*****************************!*\
  !*** ./src/doms/android.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar excluded = {\n  \"CoordinatorLayout\": \"androidx.coordinatorlayout.widget.\",\n  \"FloatingActionButton\": \"android.support.design.widget.\",\n  \"Toolbar\": \"android.support.v7.widget.\",\n  \"AppBarLayout\": \"android.support.design.widget.\",\n  \"CollapsingToolbarLayout\": \"android.support.design.widget.\",\n  \"View\": \"android.view.\",\n  \"WebView\": \"android.webkit.\",\n  \"ViewPager\": \"android.support.v4.view.\",\n  \"RotateAnimation\": \"android.view.animation.\",\n  \"LinearInterpolator\": \"android.view.animation.\",\n  \"Animation\": \"android.view.animation.\",\n  \"RecyclerView\": \"android.support.v7.widget.\",\n  \"PagerTabStrip\": \"android.support.v4.view.\",\n  \"PagerTitleStrip\": \"android.support.v4.view.\",\n  \"TabLayout\": \"in.org.npci.upiapp.\",\n  \"ShimmerFrameLayout\": \"com.facebook.shimmer.\",\n  \"SwypeLayout\": \"in.juspay.mystique.\",\n  \"SwypeScroll\": \"in.juspay.mystique.\",\n  \"AccordionLayout\": \"in.juspay.mystique.\",\n  \"Shape\": \"in.juspay.mystique.\",\n  \"BottomSheetLayout\": \"in.juspay.mystique.\",\n  \"LottieAnimationView\": \"com.airbnb.lottie.\"\n};\n\nfunction getCtr(viewGroup) {\n  var viewGroupMap = {\n    'linearLayout': 'android.widget.LinearLayout$LayoutParams->new',\n    'coordinatorLayout': 'androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams->new',\n    'scrollView': 'android.widget.LinearLayout$LayoutParams->new',\n    'horizontalScrollView': 'android.widget.LinearLayout$LayoutParams->new',\n    'relativeLayout': 'android.widget.RelativeLayout$LayoutParams->new',\n    'frameLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    'toolbar': 'android.support.v7.widget.Toolbar$LayoutParams->new',\n    'collapsingToolbarLayout': 'androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams->new',\n    'appBarLayout': 'android.support.design.widget.AppBarLayout$LayoutParams->new',\n    'view': 'android.widget.LinearLayout$LayoutParams->new',\n    'tabLayout': 'android.widget.LinearLayout$LayoutParams->new',\n    'viewPager': 'android.support.v4.view.ViewPager$LayoutParams->new',\n    'listView': 'android.widget.LinearLayout$LayoutParams->new',\n    'expandableListView': 'android.widget.LinearLayout$LayoutParams->new',\n    'recyclerView': 'android.support.v7.widget.RecyclerView$LayoutParams->new',\n    'ratingBar': 'android.widget.LinearLayout$LayoutParams->new',\n    'accordionLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    'swypeLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    'swypeScroll': 'android.widget.LinearLayout$LayoutParams->new',\n    'shimmerFrameLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    \"bottomSheetLayout\": 'android.widget.FrameLayout$LayoutParams->new'\n  };\n\n  return viewGroupMap[viewGroup];\n}\n\nArray.prototype.flatten = function () {\n  return this.reduce(function (prev, cur) {\n    var more = [].concat(cur).some(Array.isArray);\n    return prev.concat(more ? cur.flatten() : cur);\n  }, []);\n};\n\nvar parseParams = __webpack_require__(/*! ../helpers/android */ \"./src/helpers/android/index.js\").parseParams;\n\nfunction setAutogenId(props) {\n  props.node_id = window.__NODE_ID + '';\n  window.__NODE_ID++;\n\n  if (!props.__filename) props.__filename = \"filename not added\";\n  return props;\n}\n\nmodule.exports = function (type, props) {\n  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  var paramType;\n\n  children = children.flatten();\n\n  if (!props) props = {};\n\n  if ((typeof type === \"undefined\" ? \"undefined\" : _typeof(type)) === \"object\") {\n    paramType = getCtr(type.parentType);\n    props = parseParams(type.elemType, props, \"set\");\n    props = setAutogenId(props);\n    props.runInUI = props.runInUI.replace('PARAM_CTR_HOLDER', paramType);\n    if (type.elemType == \"webView\") {\n      props.runInUI = \"set_xyz=android.webkit.WebViewClient->new;this->setWebViewClient:get_xyz;\" + props.runInUI;\n    }\n    var finalType = type.elemType;\n    finalType = finalType[0].toUpperCase() + finalType.substr(1, finalType.length);\n    for (var excludedType in excluded) {\n      if (excludedType === finalType) {\n        return { type: excluded[excludedType] + finalType, props: props, children: children };\n      }\n    }\n    return { type: \"android.widget.\" + finalType, props: props, children: children };\n  } else if (typeof type === \"string\") {\n    paramType = getCtr(type);\n    props = parseParams(type, props, \"set\");\n\n    props = setAutogenId(props);\n\n    for (var j = 0; j < children.length; j++) {\n      if (children[j].props.runInUI) {\n        children[j].props.runInUI = children[j].props.runInUI.replace('PARAM_CTR_HOLDER', paramType);\n      }\n    }\n\n    type = type[0].toUpperCase() + type.substr(1, type.length);\n\n    for (var excludedType in excluded) {\n      if (excludedType === type) {\n        return { type: excluded[excludedType] + type, props: props, children: children };\n      }\n    }\n\n    return { type: \"android.widget.\" + type, props: props, children: children };\n  } else {\n    return new type(props, children);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/doms/android.js\n");

/***/ }),

/***/ "./src/doms/index.js":
/*!***************************!*\
  !*** ./src/doms/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nfunction run() {\n  if (false) {} else if (false) {} else {\n    return __webpack_require__(/*! ./android */ \"./src/doms/android.js\");\n  }\n}\n\nmodule.exports = run();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZG9tcy9pbmRleC5qcz9mZWE1Il0sIm5hbWVzIjpbInJ1biIsIndpbmRvdyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLFNBQVNBLEdBQVQsR0FBZTtBQUNiLE1BQUlDLEtBQUosRUFBMkIsRUFBM0IsTUFFTyxJQUFJQSxLQUFKLEVBQTJCLEVBQTNCLE1BRUE7QUFDTCxXQUFPQyxtQkFBT0EsQ0FBQyx3Q0FBUixDQUFQO0FBQ0Q7QUFDRjs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQkosS0FBakIiLCJmaWxlIjoiLi9zcmMvZG9tcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFwiSlVTUEFZIFRlY2hub2xvZ2llc1wiXG4qIEpVU1BBWSBUZWNobm9sb2dpZXMgUHZ0LiBMdGQuIFtodHRwczovL3d3dy5qdXNwYXkuaW5dXG4qXG4qIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpVU1BBWSBQbGF0Zm9ybS5cbipcbiogSlVTUEFZIFBsYXRmb3JtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiogaXQgZm9yIG9ubHkgZWR1Y2F0aW9uYWwgcHVycG9zZXMgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWxcbiogUHVibGljIExpY2Vuc2UgKEdOVSBBR1BMKSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbixcbiogZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiogRm9yIEVudGVycHJpc2UvQ29tbWVyaWNhbCBsaWNlbnNlcywgY29udGFjdCA8aW5mb0BqdXNwYXkuaW4+LlxuKlxuKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgVGhlIGVuZCB1c2VyIHdpbGxcbiogYmUgbGlhYmxlIGZvciBhbGwgZGFtYWdlcyB3aXRob3V0IGxpbWl0YXRpb24sIHdoaWNoIGlzIGNhdXNlZCBieSB0aGVcbiogQUJVU0Ugb2YgdGhlIExJQ0VOU0VEIFNPRlRXQVJFIGFuZCBzaGFsbCBJTkRFTU5JRlkgSlVTUEFZIGZvciBzdWNoXG4qIGRhbWFnZXMsIGNsYWltcywgY29zdCwgaW5jbHVkaW5nIHJlYXNvbmFibGUgYXR0b3JuZXkgZmVlIGNsYWltZWQgb24gSnVzcGF5LlxuKiBUaGUgZW5kIHVzZXIgaGFzIE5PIHJpZ2h0IHRvIGNsYWltIGFueSBpbmRlbW5pZmljYXRpb24gYmFzZWQgb24gaXRzIHVzZVxuKiBvZiBMaWNlbnNlZCBTb2Z0d2FyZS4gU2VlIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbipcbiogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4qIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLmh0bWw+LlxuKi9cblxuZnVuY3Rpb24gcnVuKCkge1xuICBpZiAod2luZG93Ll9fT1MgPT09IFwiSU9TXCIpIHtcbiAgICByZXR1cm4gcmVxdWlyZShcIi4vaW9zXCIpXG4gIH0gZWxzZSBpZiAod2luZG93Ll9fT1MgPT09IFwiV0VCXCIpIHtcbiAgICByZXR1cm4gcmVxdWlyZShcIi4vd2ViXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoXCIuL2FuZHJvaWRcIilcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJ1bigpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/doms/index.js\n");

/***/ }),

/***/ "./src/handler.js":
/*!************************!*\
  !*** ./src/handler.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nmodule.exports = {\n  handle: function handle(ui, callback) {\n    if (!ui) {\n      return;\n    }\n    if (ui.render) {\n      if (typeof Android === \"undefined\") throw new Error(\"Android is undefined\");\n\n      if (false) {}else {\n        if (typeof Android.getNewID == \"function\") {\n          return Android.Render(JSON.stringify(ui.render), null, \"false\");\n        } else {\n          return Android.Render(JSON.stringify(ui.render), null);\n        }\n      }\n    }\n\n    if (ui.runInUI) {\n      Android.runInUI(ui.runInUI, null);\n    }\n    if (ui.addViewToParent) {\n      Android.addViewToParent(ui.addViewToParent.parentId, JSON.stringify(ui.addViewToParent.jsx), ui.addViewToParent.index, null);\n    }\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGFuZGxlci5qcz9mMTY4Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJoYW5kbGUiLCJ1aSIsImNhbGxiYWNrIiwicmVuZGVyIiwiQW5kcm9pZCIsIkVycm9yIiwid2luZG93IiwiZ2V0TmV3SUQiLCJSZW5kZXIiLCJKU09OIiwic3RyaW5naWZ5IiwicnVuSW5VSSIsImFkZFZpZXdUb1BhcmVudCIsInBhcmVudElkIiwianN4IiwiaW5kZXgiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkFBLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsVUFBUyxnQkFBQ0MsRUFBRCxFQUFLQyxRQUFMLEVBQWtCO0FBQ3pCLFFBQUksQ0FBQ0QsRUFBTCxFQUFTO0FBQ1A7QUFDRDtBQUNELFFBQUdBLEdBQUdFLE1BQU4sRUFBYztBQUNaLFVBQUksT0FBT0MsT0FBUCxLQUFtQixXQUF2QixFQUNFLE1BQU0sSUFBSUMsS0FBSixDQUFVLHNCQUFWLENBQU47O0FBRUYsVUFBSUMsS0FBSixFQUNFLEVBREYsS0FFSztBQUNILFlBQUcsT0FBT0YsUUFBUUcsUUFBZixJQUEyQixVQUE5QixFQUEwQztBQUN4QyxpQkFBT0gsUUFBUUksTUFBUixDQUFlQyxLQUFLQyxTQUFMLENBQWVULEdBQUdFLE1BQWxCLENBQWYsRUFBMEMsSUFBMUMsRUFBZ0QsT0FBaEQsQ0FBUDtBQUNELFNBRkQsTUFFTztBQUNMLGlCQUFPQyxRQUFRSSxNQUFSLENBQWVDLEtBQUtDLFNBQUwsQ0FBZVQsR0FBR0UsTUFBbEIsQ0FBZixFQUEwQyxJQUExQyxDQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFFBQUdGLEdBQUdVLE9BQU4sRUFBZTtBQUNiUCxjQUFRTyxPQUFSLENBQWdCVixHQUFHVSxPQUFuQixFQUE0QixJQUE1QjtBQUNEO0FBQ0QsUUFBR1YsR0FBR1csZUFBTixFQUF1QjtBQUNyQlIsY0FBUVEsZUFBUixDQUF3QlgsR0FBR1csZUFBSCxDQUFtQkMsUUFBM0MsRUFBcURKLEtBQUtDLFNBQUwsQ0FBZVQsR0FBR1csZUFBSCxDQUFtQkUsR0FBbEMsQ0FBckQsRUFBNkZiLEdBQUdXLGVBQUgsQ0FBbUJHLEtBQWhILEVBQXVILElBQXZIO0FBQ0Q7QUFDRjtBQTFCYyxDQUFqQiIsImZpbGUiOiIuL3NyYy9oYW5kbGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgXCJKVVNQQVkgVGVjaG5vbG9naWVzXCJcbiogSlVTUEFZIFRlY2hub2xvZ2llcyBQdnQuIEx0ZC4gW2h0dHBzOi8vd3d3Lmp1c3BheS5pbl1cbipcbiogVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlVTUEFZIFBsYXRmb3JtLlxuKlxuKiBKVVNQQVkgUGxhdGZvcm0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuKiBpdCBmb3Igb25seSBlZHVjYXRpb25hbCBwdXJwb3NlcyB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbFxuKiBQdWJsaWMgTGljZW5zZSAoR05VIEFHUEwpIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLFxuKiBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuKiBGb3IgRW50ZXJwcmlzZS9Db21tZXJpY2FsIGxpY2Vuc2VzLCBjb250YWN0IDxpbmZvQGp1c3BheS5pbj4uXG4qXG4qIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBUaGUgZW5kIHVzZXIgd2lsbFxuKiBiZSBsaWFibGUgZm9yIGFsbCBkYW1hZ2VzIHdpdGhvdXQgbGltaXRhdGlvbiwgd2hpY2ggaXMgY2F1c2VkIGJ5IHRoZVxuKiBBQlVTRSBvZiB0aGUgTElDRU5TRUQgU09GVFdBUkUgYW5kIHNoYWxsIElOREVNTklGWSBKVVNQQVkgZm9yIHN1Y2hcbiogZGFtYWdlcywgY2xhaW1zLCBjb3N0LCBpbmNsdWRpbmcgcmVhc29uYWJsZSBhdHRvcm5leSBmZWUgY2xhaW1lZCBvbiBKdXNwYXkuXG4qIFRoZSBlbmQgdXNlciBoYXMgTk8gcmlnaHQgdG8gY2xhaW0gYW55IGluZGVtbmlmaWNhdGlvbiBiYXNlZCBvbiBpdHMgdXNlXG4qIG9mIExpY2Vuc2VkIFNvZnR3YXJlLiBTZWUgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuKlxuKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwuaHRtbD4uXG4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFuZGxlIDogKHVpLCBjYWxsYmFjaykgPT4ge1xuICAgIGlmICghdWkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYodWkucmVuZGVyKSB7XG4gICAgICBpZiAodHlwZW9mIEFuZHJvaWQgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFuZHJvaWQgaXMgdW5kZWZpbmVkXCIpO1xuXG4gICAgICBpZiAod2luZG93Ll9fT1MgIT0gXCJBTkRST0lEXCIpXG4gICAgICAgIHJldHVybiBBbmRyb2lkLlJlbmRlcih1aS5yZW5kZXIsIG51bGwpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmKHR5cGVvZiBBbmRyb2lkLmdldE5ld0lEID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBBbmRyb2lkLlJlbmRlcihKU09OLnN0cmluZ2lmeSh1aS5yZW5kZXIpLCBudWxsLCBcImZhbHNlXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBBbmRyb2lkLlJlbmRlcihKU09OLnN0cmluZ2lmeSh1aS5yZW5kZXIpLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHVpLnJ1bkluVUkpIHtcbiAgICAgIEFuZHJvaWQucnVuSW5VSSh1aS5ydW5JblVJLCBudWxsKTtcbiAgICB9XG4gICAgaWYodWkuYWRkVmlld1RvUGFyZW50KSB7XG4gICAgICBBbmRyb2lkLmFkZFZpZXdUb1BhcmVudCh1aS5hZGRWaWV3VG9QYXJlbnQucGFyZW50SWQsIEpTT04uc3RyaW5naWZ5KHVpLmFkZFZpZXdUb1BhcmVudC5qc3gpLCB1aS5hZGRWaWV3VG9QYXJlbnQuaW5kZXgsIG51bGwpO1xuICAgIH1cbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/handler.js\n");

/***/ }),

/***/ "./src/helper.js":
/*!***********************!*\
  !*** ./src/helper.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\n// Following functions are used by WEB and IOS Render\nfunction cacheDimen(view) {\n  var props = view.props;\n  var dimen = {\n    w: props.w,\n    h: props.h,\n    x: props.x,\n    y: props.y,\n    gravity: props.gravity,\n    padding: props.padding,\n    orientation: props.orientation,\n    stroke: props.stroke ? props.stroke.split(\",\")[0] * 1 : 0\n  };\n  window.__VIEW_DIMENSIONS[props.id] = dimen;\n}\n\nfunction shouldMove(view) {\n  var props = view.props;\n  var dimen = {\n    w: props.w,\n    h: props.h,\n    x: props.x,\n    y: props.y\n  };\n  var cachedDimen = window.__VIEW_DIMENSIONS[props.id];\n  var changed = false;\n  if (!cachedDimen) return dimen;\n  for (var key in dimen) {\n    if (cachedDimen[key] != dimen[key]) {\n      dimen.id = props.id;\n      changed = true;\n    }\n  }\n  if (changed) return dimen;\n  return null;\n}\n\nfunction getOS() {\n  var userAgent = navigator.userAgent;\n  if (!userAgent) return console.error(new Error(\"UserAgent is null\"));\n  if (userAgent.includes(\"Android\") && userAgent.includes(\"Version\")) return \"ANDROID\";\n  if ((userAgent.includes(\"iPhone\") || userAgent.includes(\"iPad\")) && !userAgent.includes(\"Version\")) return \"IOS\";\n  return \"WEB\";\n}\n\nfunction clearViewExternals(view) {\n  if (!view) return;\n\n  delete window.__VIEWS[view.props.id];\n  delete window.__VIEW_DIMENSIONS[view.props.id];\n\n  if (__OBSERVERS[view.props.id]) delete window.__OBSERVERS[view.props.id];\n\n  view.children.forEach(clearViewExternals);\n}\n\n// use: clone( <thing to copy> ) returns <new copy>\nfunction clone(o, m) {\n  // return non object values\n  if ('object' !== (typeof o === \"undefined\" ? \"undefined\" : _typeof(o))) return o;\n  // m: a map of old refs to new object refs to stop recursion\n  if ('object' !== (typeof m === \"undefined\" ? \"undefined\" : _typeof(m)) || null === m) m = new WeakMap();\n  var n = m.get(o);\n  if ('undefined' !== typeof n) return n;\n  // shallow/leaf clone object\n  var c = Object.getPrototypeOf(o).constructor;\n  // TODO: specialize copies for expected built in types i.e. Date etc\n  switch (c) {\n    // shouldn't be copied, keep reference\n    case Boolean:\n    case Error:\n    case Function:\n    case Number:\n    case Promise:\n    case String:\n    case Symbol:\n    case WeakMap:\n    case WeakSet:\n      n = o;\n      break;\n    // array like/collection objects\n    case Array:\n      m.set(o, n = o.slice(0));\n      // recursive copy for child objects\n      n.forEach(function (v, i) {\n        if ('object' === (typeof v === \"undefined\" ? \"undefined\" : _typeof(v))) n[i] = clone(v, m);\n      });\n      break;\n    case ArrayBuffer:\n      m.set(o, n = o.slice(0));\n      break;\n    case DataView:\n      m.set(o, n = new c(clone(o.buffer, m), o.byteOffset, o.byteLength));\n      break;\n    case Map:\n    case Set:\n      m.set(o, n = new c(clone(Array.from(o.entries()), m)));\n      break;\n    case Int8Array:\n    case Uint8Array:\n    case Uint8ClampedArray:\n    case Int16Array:\n    case Uint16Array:\n    case Int32Array:\n    case Uint32Array:\n    case Float32Array:\n    case Float64Array:\n      m.set(o, n = new c(clone(o.buffer, m), o.byteOffset, o.length));\n      break;\n    // use built in copy constructor\n    case Date:\n    case RegExp:\n      m.set(o, n = new c(o));\n      break;\n    // fallback generic object copy\n    default:\n      m.set(o, n = Object.assign(new c(), o));\n      // recursive copy for child objects\n      for (c in n) {\n        if ('object' === _typeof(n[c])) n[c] = clone(n[c], m);\n      }}\n  return n;\n}\n\nfunction merge() {\n  var obj = {},\n      i = 0,\n      il = arguments.length,\n      key;\n  for (; i < il; i++) {\n    for (key in arguments[i]) {\n      if (arguments[i].hasOwnProperty(key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n  return obj;\n};\n\nmodule.exports = {\n  shouldMove: shouldMove,\n  cacheDimen: cacheDimen,\n  getOS: getOS,\n  merge: merge,\n  clearViewExternals: clearViewExternals,\n  clone: clone\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/helper.js\n");

/***/ }),

/***/ "./src/helpers/android/index.js":
/*!**************************************!*\
  !*** ./src/helpers/android/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nmodule.exports = {\n\tparseParams: __webpack_require__(/*! ./parseParams */ \"./src/helpers/android/parseParams.js\"),\n\tmapPrams: __webpack_require__(/*! ./mapParams */ \"./src/helpers/android/mapParams.js\"),\n\tcallbackMapper: __webpack_require__(/*! ../common/callbackMapper */ \"./src/helpers/common/callbackMapper.js\")\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9hbmRyb2lkL2luZGV4LmpzPzNkZTYiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlUGFyYW1zIiwicmVxdWlyZSIsIm1hcFByYW1zIiwiY2FsbGJhY2tNYXBwZXIiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkFBLE9BQU9DLE9BQVAsR0FBaUI7QUFDaEJDLGNBQWNDLG1CQUFPQSxDQUFDLDJEQUFSLENBREU7QUFFaEJDLFdBQVdELG1CQUFPQSxDQUFDLHVEQUFSLENBRks7QUFHaEJFLGlCQUFpQkYsbUJBQU9BLENBQUMsd0VBQVI7QUFIRCxDQUFqQiIsImZpbGUiOiIuL3NyYy9oZWxwZXJzL2FuZHJvaWQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBcIkpVU1BBWSBUZWNobm9sb2dpZXNcIlxuKiBKVVNQQVkgVGVjaG5vbG9naWVzIFB2dC4gTHRkLiBbaHR0cHM6Ly93d3cuanVzcGF5LmluXVxuKlxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBKVVNQQVkgUGxhdGZvcm0uXG4qXG4qIEpVU1BBWSBQbGF0Zm9ybSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4qIGl0IGZvciBvbmx5IGVkdWNhdGlvbmFsIHB1cnBvc2VzIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsXG4qIFB1YmxpYyBMaWNlbnNlIChHTlUgQUdQTCkgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sXG4qIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4qIEZvciBFbnRlcnByaXNlL0NvbW1lcmljYWwgbGljZW5zZXMsIGNvbnRhY3QgPGluZm9AanVzcGF5LmluPi5cbipcbiogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4qIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4qIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRoZSBlbmQgdXNlciB3aWxsXG4qIGJlIGxpYWJsZSBmb3IgYWxsIGRhbWFnZXMgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGljaCBpcyBjYXVzZWQgYnkgdGhlXG4qIEFCVVNFIG9mIHRoZSBMSUNFTlNFRCBTT0ZUV0FSRSBhbmQgc2hhbGwgSU5ERU1OSUZZIEpVU1BBWSBmb3Igc3VjaFxuKiBkYW1hZ2VzLCBjbGFpbXMsIGNvc3QsIGluY2x1ZGluZyByZWFzb25hYmxlIGF0dG9ybmV5IGZlZSBjbGFpbWVkIG9uIEp1c3BheS5cbiogVGhlIGVuZCB1c2VyIGhhcyBOTyByaWdodCB0byBjbGFpbSBhbnkgaW5kZW1uaWZpY2F0aW9uIGJhc2VkIG9uIGl0cyB1c2Vcbiogb2YgTGljZW5zZWQgU29mdHdhcmUuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4qXG4qIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC5odG1sPi5cbiovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRwYXJzZVBhcmFtcyA6IHJlcXVpcmUoXCIuL3BhcnNlUGFyYW1zXCIpLFxuXHRtYXBQcmFtcyA6IHJlcXVpcmUoXCIuL21hcFBhcmFtc1wiKSxcblx0Y2FsbGJhY2tNYXBwZXIgOiByZXF1aXJlKFwiLi4vY29tbW9uL2NhbGxiYWNrTWFwcGVyXCIpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/helpers/android/index.js\n");

/***/ }),

/***/ "./src/helpers/android/mapParams.js":
/*!******************************************!*\
  !*** ./src/helpers/android/mapParams.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _ref, _ref2, _map;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar map = (_map = {\n  textFromHtml: {\n    values: [{\n      type: 's'\n    }],\n    dontMap: 'true',\n    fnName: 'setText',\n    inVokedIn: 'VIEW'\n  },\n  baseAlign: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: true,\n    inVokedIn: 'VIEW',\n    fnName: \"setBaselineAligned\"\n  },\n  showDividers: {\n    values: [{\n      type: 'i'\n    }],\n    dontMap: 'true',\n    fnName: 'setShowDividers',\n    inVokedIn: 'VIEW'\n  },\n  \"dividerDrawable\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setDividerDrawable',\n    inVokedIn: 'VIEW'\n  },\n  tabTextColors: {\n    values: [{\n      type: 's'\n    }, {\n      type: 's'\n    }],\n    dontMap: true,\n    inVokedIn: 'VIEW',\n    fnName: 'setTabTextColors'\n  },\n  \"selectedTabIndicatorHeight\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setSelectedTabIndicatorHeight',\n    inVokedIn: 'VIEW'\n  },\n  foreground: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: 'true',\n    fnName: 'setColor',\n    inVokedIn: 'FOREGROUND'\n  },\n  selectedTabIndicatorColor: {\n    values: [{\n      type: 's'\n    }],\n    dontMap: true,\n    fnName: 'setSelectedTabIndicatorColor',\n    inVokedIn: 'VIEW'\n  },\n  layoutTransition: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: 'true',\n    fnName: 'setLayoutTransition',\n    inVokedIn: 'LAYOUT_TRANSITION'\n  },\n\n  focusOut: { // doesnt work\n    dontMap: 'true',\n    fnName: 'clearFocus',\n    inVokedIn: 'VIEW'\n  },\n  focus: {\n    dontMap: 'true',\n    fnName: 'requestFocus',\n    inVokedIn: 'VIEW'\n  },\n\n  fillViewport: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: true,\n    inVokedIn: 'VIEW',\n    fnName: \"setFillViewport\"\n  },\n  \"primitive\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setPrimitive',\n    inVokedIn: 'VIEW'\n  },\n  \"cx\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setCx',\n    inVokedIn: 'VIEW'\n  },\n  \"cy\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setCy',\n    inVokedIn: 'VIEW'\n  },\n  \"radius\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setRadius',\n    inVokedIn: 'VIEW'\n  },\n  \"hex\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setColor',\n    inVokedIn: 'VIEW'\n  },\n  \"style\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setStyle',\n    inVokedIn: 'VIEW'\n  },\n  \"sweepAngle\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setSweepAngle',\n    inVokedIn: 'VIEW'\n  },\n  \"startAngle\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setStartAngle',\n    inVokedIn: 'VIEW'\n  },\n  \"strokeWidth\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setStrokeWidth',\n    inVokedIn: 'VIEW'\n  },\n  setDate: {\n    values: [{\n      type: 'l'\n    }],\n    dontMap: 'true',\n    fnName: 'setDate',\n    inVokedIn: 'VIEW'\n  },\n  minDate: {\n    values: [{\n      type: 'l'\n    }],\n    dontMap: 'true',\n    fnName: 'setMinDate',\n    inVokedIn: 'VIEW'\n  },\n  maxDate: {\n    values: [{\n      type: 'l'\n    }],\n    dontMap: 'true',\n    fnName: 'setMaxDate',\n    inVokedIn: 'VIEW'\n  },\n  clipChildren: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: 'true',\n    fnName: 'setClipChildren',\n    inVokedIn: 'VIEW'\n  },\n  adjustViewBounds: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: 'true',\n    fnName: 'setAdjustViewBounds',\n    inVokedIn: 'VIEW'\n  },\n  maxLines: {\n    values: [{\n      type: 'i'\n    }],\n    dontMap: 'true',\n    fnName: 'setMaxLines',\n    inVokedIn: 'VIEW'\n  },\n  singleLine: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: 'true',\n    fnName: 'setSingleLine',\n    inVokedIn: 'VIEW'\n  },\n  hardware: {\n    values: [{\n      type: 'i'\n    }, {\n      type: 'i'\n    }],\n    dontMap: true,\n    fnName: 'setLayerType',\n    inVokedIn: 'VIEW'\n  },\n  selected: {\n    values: [{\n      type: 'b'\n    }],\n    dontMap: true,\n    fnName: 'setSelected',\n    inVokedIn: 'VIEW'\n  },\n  curve: {\n    values: [{\n      type: 's',\n      'linear': \"0\"\n    }],\n    fnName: 'setInterpolator',\n    inVokedIn: 'VIEW'\n  },\n  fontFamily: {\n    values: [{\n      type: 's',\n      dontMap: true\n    }, {\n      type: 'i',\n      'normal': 0,\n      'bold': 1,\n      'italic': 2,\n      'bold_italic': 3\n    }],\n    fnName: 'setFontFamily',\n    inVokedIn: 'VIEW'\n  },\n  x: {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setX',\n    inVokedIn: 'VIEW'\n  },\n  'bringToFront': {\n    values: [],\n    inVokedIn: 'VIEW',\n    fnName: \"bringToFront\"\n  },\n  'above': {\n    values: [{\n      type: 'i',\n      dontMap: true\n    }, {\n      type: 'i',\n      dontMap: true\n    }],\n    inVokedIn: 'PARAMS',\n    fnName: \"addRule\"\n  },\n  \"checked\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setChecked',\n    inVokedIn: 'VIEW'\n  },\n  y: {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setY',\n    inVokedIn: 'VIEW'\n  },\n  \"backgroundDrawable\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setBackground',\n    inVokedIn: 'VIEW'\n  },\n  buttonTint: {\n    value: [{\n      type: 's'\n    }],\n    dontMap: true,\n    fnName: 'setButtonTintList',\n    inVokedIn: 'VIEW'\n  },\n  visibility: {\n    values: [{\n      type: 'i',\n      visible: 0,\n      invisible: 4,\n      gone: 8\n    }],\n    fnName: 'setVisibility',\n    inVokedIn: 'VIEW'\n  },\n  \"scaleType\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setScaleType',\n    inVokedIn: 'VIEW'\n  },\n  \"progressColor\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setIndeterminateTintList',\n    inVokedIn: 'VIEW'\n  },\n  \"alpha\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setAlpha',\n    inVokedIn: 'VIEW'\n  },\n  \"imageUrl\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setImageDrawable',\n    inVokedIn: 'VIEW'\n  },\n  \"placeHolder\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setImageDrawable',\n    inVokedIn: 'VIEW'\n  },\n  \"packageIcon\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setImageDrawable',\n    inVokedIn: 'VIEW'\n  },\n  \"scrollTo\": {\n    values: [{\n      type: 'i'\n    }, {\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'smoothScrollTo',\n    inVokedIn: 'VIEW'\n  },\n  \"cornerRadii\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setCornerRadii',\n    inVokedIn: 'DRAWABLE'\n  },\n  \"lineSpacing\": {\n    values: [{\n      type: 'dp'\n    }, {\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setLineSpacing',\n    inVokedIn: 'VIEW'\n  },\n  \"url\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'loadUrl',\n    inVokedIn: 'VIEW'\n  },\n  \"translationY\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setTranslationY',\n    inVokedIn: 'VIEW'\n  },\n  \"translationX\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setTranslationX',\n    inVokedIn: 'VIEW'\n  },\n  translationZ: {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setTranslationZ',\n    inVokedIn: 'VIEW'\n  },\n  \"delay\": {\n    values: [{\n      type: 'l'\n    }],\n    'dontMap': true,\n    fnName: 'setStartDelay'\n  },\n  \"duration\": {\n    values: [{\n      type: 'l'\n    }],\n    'dontMap': true,\n    fnName: 'setDuration'\n  },\n  \"pivotX\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setPivotX',\n    inVokedIn: 'VIEW'\n  },\n  \"pivotY\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setPivotY',\n    inVokedIn: 'VIEW'\n  },\n  \"minWidth\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setMinimumWidth',\n    inVokedIn: 'VIEW'\n  },\n  \"minHeight\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setMinimumHeight',\n    inVokedIn: 'VIEW'\n  },\n  \"maxWidth\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setMaxWidth',\n    inVokedIn: 'VIEW'\n  },\n  \"shadowTag\": {\n    values: [{\n      type: 'cs'\n    }],\n    'dontMap': true,\n    fnName: 'shadowTag',\n    inVokedIn: 'VIEW'\n  },\n  \"androidShadow\": {\n    values: [{\n      type: 'cs'\n    }],\n    'dontMap': true,\n    fnName: 'androidShadow',\n    inVokedIn: 'VIEW'\n  },\n  \"gradient\": {\n    values: [{\n      type: 'cs'\n    }],\n    'dontMap': true,\n    fnName: 'setColors',\n    inVokedIn: 'DRAWABLE'\n  },\n  \"gradientAngle\": {\n    values: [{\n      type: 's'\n    }],\n    'dontMap': true,\n    fnName: 'setOrientation',\n    inVokedIn: 'DRAWABLE'\n  },\n  \"lineHeight\": {\n    values: [{\n      type: 'dp'\n    }],\n    'dontMap': true,\n    fnName: 'setLineHeight',\n    inVokedIn: 'VIEW'\n  },\n  \"letterSpacing\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setLetterSpacing',\n    inVokedIn: 'VIEW'\n  },\n  \"hint\": {\n    values: [{\n      type: 'cs'\n    }],\n    'dontMap': true,\n    fnName: 'setHint',\n    inVokedIn: 'VIEW'\n  },\n  \"inputType\": {\n    values: [{\n      type: 'i',\n      password: '129',\n      numeric: '2',\n      numericPassword: '18',\n      numericWithoutSuggestion: '524291',\n      disabled: '0',\n      text: '1',\n      multiText: '3'\n    }],\n    fnName: 'setInputType',\n    inVokedIn: 'VIEW'\n  },\n  \"inputTypeI\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setInputType',\n    inVokedIn: 'VIEW'\n  },\n  \"textSize\": {\n    values: [{\n      type: 'i'\n    }, {\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setTextSize',\n    inVokedIn: 'VIEW'\n  },\n  \"fontSize\": {\n    values: [{\n      type: 'i'\n    }, {\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setTextSize',\n    inVokedIn: 'VIEW'\n  },\n  \"textIsSelectable\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setTextIsSelectable',\n    inVokedIn: 'VIEW'\n  },\n  \"fontStyle\": {\n    values: [{\n      type: 's'\n    }],\n    dontMap: 'true',\n    fnName: 'setTypeface',\n    inVokedIn: 'VIEW'\n  },\n  \"font\": {\n    values: [{\n      type: 's'\n    }],\n    dontMap: 'true',\n    fnName: 'setTypeface',\n    inVokedIn: 'VIEW'\n  },\n  \"textAllCaps\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setAllCaps',\n    inVokedIn: 'VIEW'\n  },\n  \"expand\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setExpand',\n    inVokedIn: 'VIEW'\n  },\n  \"focusableInTouchMode\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setFocusableInTouchMode',\n    inVokedIn: 'VIEW'\n  },\n  \"descendantFocusability\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setDescendantFocusability',\n    inVokedIn: 'VIEW'\n  },\n  \"expandDuration\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setExpandDuration',\n    inVokedIn: 'VIEW'\n  },\n  \"expandScrollParent\": {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setScrollParent',\n    inVokedIn: 'VIEW'\n  },\n  \"expandAlpha\": {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setExpandAlpha',\n    inVokedIn: 'VIEW'\n  },\n  \"defaultExpand\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setDefaultExpand',\n    inVokedIn: 'VIEW'\n  },\n  \"swypeEnabled\": {\n    values: [{\n      type: 'b'\n    }],\n    'dontMap': true,\n    fnName: 'setSwypeEnabled',\n    inVokedIn: 'VIEW'\n  },\n  toast: {\n    values: [{\n      type: 'cs'\n    }],\n    'dontMap': true,\n    fnName: 'showToast',\n    inVokedIn: 'CONTEXT'\n  },\n  scaleX: {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setScaleX',\n    inVokedIn: 'VIEW'\n  },\n  scaleY: {\n    values: [{\n      type: 'f'\n    }],\n    'dontMap': true,\n    fnName: 'setScaleY',\n    inVokedIn: 'VIEW'\n  },\n  id: {\n    values: [{\n      type: 'i'\n    }],\n    'dontMap': true,\n    fnName: 'setId',\n    inVokedIn: 'VIEW'\n  },\n  gravity: {\n    values: [(_ref = {\n      type: 'i',\n      center_horizontal: 1,\n      center_vertical: 16,\n      bottom: 80,\n      left: 8388611,\n      right: 8388613,\n      center: 17\n    }, _defineProperty(_ref, 'bottom', 80), _defineProperty(_ref, 'top_vertical', 48), _defineProperty(_ref, 'start', 8388611), _defineProperty(_ref, 'end', 8388613), _ref)],\n    fnName: 'setGravity',\n    inVokedIn: 'VIEW'\n  },\n  orientation: {\n    values: [{\n      type: 'i',\n      horizontal: 0,\n      vertical: 1\n    }],\n    fnName: 'setOrientation',\n    inVokedIn: 'VIEW'\n  },\n  text: {\n    values: [{\n      type: 'cs'\n    }],\n    dontMap: true,\n    fnName: 'setText',\n    inVokedIn: 'VIEW'\n  },\n  width: {\n    values: [{\n      type: 'i',\n      match_parent: -1,\n      wrap_content: -2\n    }],\n    inVokedIn: 'PARAMS',\n    ctr: true,\n    varName: 'var_width'\n  },\n  weight: {\n    values: [{\n      type: 'f',\n      match_parent: -1,\n      wrap_content: -2\n    }],\n    dontMap: true,\n    inVokedIn: 'PARAMS',\n    varName: 'var_weight'\n  },\n  height: {\n    values: [{\n      type: 'i',\n      match_parent: -1,\n      wrap_content: -2\n    }],\n    inVokedIn: 'PARAMS',\n    ctr: true,\n    varName: 'var_height'\n  },\n  layout_gravity: {\n    values: [(_ref2 = {\n      type: 'i',\n      bottom_right: 21,\n      top: 30,\n      bottom: 50,\n      left: 3,\n      right: 5,\n      center: 17\n    }, _defineProperty(_ref2, 'bottom', 80), _defineProperty(_ref2, 'center_horizontal', 1), _defineProperty(_ref2, 'center_vertical', 16), _defineProperty(_ref2, 'start', 8388611), _defineProperty(_ref2, 'end', 8388613), _ref2)],\n    inVokedIn: 'PARAMS',\n    varName: \"var_gravity\"\n  },\n  margin: {\n    values: [{\n      type: 'dp'\n    }, {\n      type: 'dp'\n    }, {\n      type: 'dp'\n    }, {\n      type: 'dp'\n    }],\n    dontMap: true,\n    inVokedIn: 'PARAMS',\n    fnName: \"setMargins\"\n  },\n  marginStart: {\n    values: [{\n      type: 'dp'\n    }],\n    dontMap: true,\n    inVokedIn: 'PARAMS',\n    fnName: \"setMarginStart\"\n  },\n  marginEnd: {\n    values: [{\n      type: 'dp'\n    }],\n    dontMap: true,\n    inVokedIn: 'PARAMS',\n    fnName: \"setMarginEnd\"\n  },\n  padding: {\n    values: [{\n      type: 'dp'\n    }, {\n      type: 'dp'\n    }, {\n      type: 'dp'\n    }, {\n      type: 'dp'\n    }],\n    dontMap: true,\n    inVokedIn: 'VIEW',\n    fnName: \"setPaddingRelative\"\n  },\n  'centerInParent': {\n    values: [{\n      type: 'i',\n      'true': 13,\n      'false': 12121\n    }, {\n      type: 'i',\n      dontMap: true\n    }],\n    inVokedIn: 'PARAMS',\n    fnName: \"addRule\"\n  },\n  'centerHorizontal': {\n    values: [{\n      type: 'i',\n      'true': 14,\n      'false': 12121\n    }, {\n      type: 'i',\n      dontMap: true\n    }],\n    inVokedIn: 'PARAMS',\n    fnName: \"addRule\"\n  },\n  'centerVertical': {\n    values: [{\n      type: 'i',\n      'true': 15,\n      'false': 12121\n    }, {\n      type: 'i',\n      dontMap: true\n    }],\n    inVokedIn: 'PARAMS',\n    fnName: \"addRule\"\n  }\n}, _defineProperty(_map, 'checked', {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setChecked',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'alignParentBottom', {\n  values: [{\n    type: 'i',\n    'true': 12,\n    'false': 12121\n  }, {\n    type: 'i',\n    dontMap: true\n  }],\n  inVokedIn: 'PARAMS',\n  fnName: \"addRule\"\n}), _defineProperty(_map, 'alignParentTop', {\n  values: [{\n    type: 'i',\n    'true': 10,\n    'false': 12121\n  }, {\n    type: 'i',\n    dontMap: true\n  }],\n  inVokedIn: 'PARAMS',\n  fnName: \"addRule\"\n}), _defineProperty(_map, 'alignParentRight', {\n  values: [{\n    type: 'i',\n    'true': 11,\n    'false': 12121\n  }, {\n    type: 'i',\n    dontMap: true\n  }],\n  inVokedIn: 'PARAMS',\n  fnName: \"addRule\"\n}), _defineProperty(_map, 'alignParentLeft', {\n  values: [{\n    type: 'i',\n    'true': 9,\n    'false': 12121\n  }, {\n    type: 'i',\n    dontMap: true\n  }],\n  inVokedIn: 'PARAMS',\n  fnName: \"addRule\"\n}), _defineProperty(_map, 'leftOf', {\n  values: [{\n    type: 'i',\n    'true': 0,\n    'false': 12121\n  }, {\n    type: 'i',\n    dontMap: true\n  }],\n  inVokedIn: 'PARAMS',\n  fnName: \"addRule\"\n}), _defineProperty(_map, 'cornerRadius', {\n  values: [{\n    type: 'dpf'\n  }],\n  dontMap: true,\n  inVokedIn: 'DRAWABLE',\n  fnName: \"setCornerRadius\"\n}), _defineProperty(_map, 'stroke', {\n  values: [{\n    type: 'dp'\n  }, {\n    type: 's'\n  }],\n  dontMap: true,\n  inVokedIn: 'DRAWABLE',\n  fnName: \"setStroke\"\n}), _defineProperty(_map, \"typeface\", {\n  values: [{\n    type: 'i',\n    'normal': 0,\n    'bold': 1,\n    'italic': 2,\n    'bold_italic': 3\n  }],\n  fnName: 'setTypeface',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'background', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  inVokedIn: 'DRAWABLE',\n  fnName: \"setColor\"\n}), _defineProperty(_map, 'backgroundDrawable', {\n  values: [{\n    type: 's'\n  }],\n  'dontMap': true,\n  fnName: 'setBackgroundDrawable',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'backgroundColor', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  inVokedIn: 'VIEW',\n  fnName: \"setBackgroundColor\"\n}), _defineProperty(_map, 'color', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  fnName: 'setTextColor',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'hintColor', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  fnName: 'setHintTextColor',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'btnBackground', {\n  values: [{\n    type: 's'\n  }, {\n    type: 'i'\n  }],\n  dontMap: true,\n  inVokedIn: 'MUTATEBG',\n  fnName: \"setColorFilter\"\n}), _defineProperty(_map, 'colorFilter', {\n  values: [{\n    type: 's'\n  }, {\n    type: 'i'\n  }],\n  dontMap: true,\n  inVokedIn: 'VIEW',\n  fnName: \"setColorFilter\"\n}), _defineProperty(_map, 'btnColor', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  fnName: 'setTextColor',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'shadowLayer', {\n  values: [{\n    type: 'f'\n  }, {\n    type: 'f'\n  }, {\n    type: 'f'\n  }, {\n    type: 'i'\n  }],\n  dontMap: true,\n  fnName: 'setShadowLayer',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'elevation', {\n  values: [{\n    type: 'i'\n  }],\n  dontMap: true,\n  fnName: 'setElevation',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'rotationX', {\n  values: [{\n    type: 'f'\n  }],\n  dontMap: true,\n  fnName: 'setRotationX',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'rotationY', {\n  values: [{\n    type: 'f'\n  }],\n  dontMap: true,\n  fnName: 'setRotationY',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'rotation', {\n  values: [{\n    type: 'f'\n  }],\n  dontMap: true,\n  fnName: 'setRotation',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'backgroundTint', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  fnName: 'setBackgroundTintList',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"scrollBarX\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setHorizontalScrollBarEnabled',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"scrollBarY\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setVerticalScrollBarEnabled',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"clickable\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setClickable',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"cursor\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setCursorVisible',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"longClickable\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setLongClickable',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"focusable\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setFocusable',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"selectable\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setBackgroundResource',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"selectableItem\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setBackgroundResource',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'values', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: true,\n  fnName: 'setAdapter',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'maxSeek', {\n  values: [{\n    type: 'i'\n  }],\n  fnName: 'setMax',\n  inVokedIn: \"VIEW\",\n  dontMap: true\n}), _defineProperty(_map, 'accessibilityHint', {\n  values: [{\n    type: 's'\n  }],\n  dontMap: 'true',\n  fnName: 'setContentDescription',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, 'imeOptions', {\n  values: [{\n    type: 'i'\n  }],\n  dontMap: 'true',\n  fnName: 'setImeOptions',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"horizontalFade\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setHorizontalFadingEdgeEnabled',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"fadingEdgeLength\", {\n  values: [{\n    type: 'i'\n  }],\n  'dontMap': true,\n  fnName: 'setFadingEdgeLength',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"shimmer\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setBackground',\n  alternateFnName: 'setShimmer',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"shimmerActive\", {\n  values: [],\n  'dontMap': true,\n  fnName: 'startShimmer',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"shimmerInactive\", {\n  values: [],\n  'dontMap': true,\n  fnName: 'stopShimmer',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"peakHeight\", {\n  values: [{\n    type: 'dp'\n  }],\n  'dontMap': true,\n  fnName: 'setPeakHeight',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"sheetState\", {\n  values: [{\n    type: 'i',\n    expanded: 3,\n    collapsed: 4,\n    hidden: 5,\n    halfExpanded: 6\n  }],\n  fnName: 'setState',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"halfExpandedRatio\", {\n  values: [{\n    type: 'f'\n  }],\n  'dontMap': true,\n  fnName: 'setHalfExpandedRatio',\n  inVokedIn: 'VIEW'\n}), _defineProperty(_map, \"hideable\", {\n  values: [{\n    type: 'b'\n  }],\n  'dontMap': true,\n  fnName: 'setHideable',\n  inVokedIn: 'VIEW'\n}), _map);\n\nmodule.exports = map;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/helpers/android/mapParams.js\n");

/***/ }),

/***/ "./src/helpers/android/objMap.js":
/*!***************************************!*\
  !*** ./src/helpers/android/objMap.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar map = {\n  'PARAMS': {\n    'required': 'width, height',\n    'viewMethod': 'setLayoutParams,getLayoutParams'\n  },\n  'DRAWABLE': {\n    'ctr': 'android.graphics.drawable.GradientDrawable->new',\n    'required': '',\n    'viewMethod': 'setBackground,getBackground'\n  }\n};\n\nmodule.exports = map;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9hbmRyb2lkL29iak1hcC5qcz82YWE1Il0sIm5hbWVzIjpbIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEsSUFBS0EsTUFBTTtBQUNULFlBQVU7QUFDUixnQkFBWSxlQURKO0FBRVIsa0JBQWM7QUFGTixHQUREO0FBS1QsY0FBWTtBQUNWLFdBQU8saURBREc7QUFFVixnQkFBWSxFQUZGO0FBR1Ysa0JBQWM7QUFISjtBQUxILENBQVg7O0FBYUFDLE9BQU9DLE9BQVAsR0FBaUJGLEdBQWpCIiwiZmlsZSI6Ii4vc3JjL2hlbHBlcnMvYW5kcm9pZC9vYmpNYXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBcIkpVU1BBWSBUZWNobm9sb2dpZXNcIlxuKiBKVVNQQVkgVGVjaG5vbG9naWVzIFB2dC4gTHRkLiBbaHR0cHM6Ly93d3cuanVzcGF5LmluXVxuKlxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBKVVNQQVkgUGxhdGZvcm0uXG4qXG4qIEpVU1BBWSBQbGF0Zm9ybSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4qIGl0IGZvciBvbmx5IGVkdWNhdGlvbmFsIHB1cnBvc2VzIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsXG4qIFB1YmxpYyBMaWNlbnNlIChHTlUgQUdQTCkgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sXG4qIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4qIEZvciBFbnRlcnByaXNlL0NvbW1lcmljYWwgbGljZW5zZXMsIGNvbnRhY3QgPGluZm9AanVzcGF5LmluPi5cbipcbiogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4qIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4qIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRoZSBlbmQgdXNlciB3aWxsXG4qIGJlIGxpYWJsZSBmb3IgYWxsIGRhbWFnZXMgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGljaCBpcyBjYXVzZWQgYnkgdGhlXG4qIEFCVVNFIG9mIHRoZSBMSUNFTlNFRCBTT0ZUV0FSRSBhbmQgc2hhbGwgSU5ERU1OSUZZIEpVU1BBWSBmb3Igc3VjaFxuKiBkYW1hZ2VzLCBjbGFpbXMsIGNvc3QsIGluY2x1ZGluZyByZWFzb25hYmxlIGF0dG9ybmV5IGZlZSBjbGFpbWVkIG9uIEp1c3BheS5cbiogVGhlIGVuZCB1c2VyIGhhcyBOTyByaWdodCB0byBjbGFpbSBhbnkgaW5kZW1uaWZpY2F0aW9uIGJhc2VkIG9uIGl0cyB1c2Vcbiogb2YgTGljZW5zZWQgU29mdHdhcmUuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4qXG4qIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC5odG1sPi5cbiovXG5cblxudmFyICBtYXAgPSB7XG4gICdQQVJBTVMnOiB7XG4gICAgJ3JlcXVpcmVkJzogJ3dpZHRoLCBoZWlnaHQnLFxuICAgICd2aWV3TWV0aG9kJzogJ3NldExheW91dFBhcmFtcyxnZXRMYXlvdXRQYXJhbXMnXG4gIH0sXG4gICdEUkFXQUJMRSc6IHtcbiAgICAnY3RyJzogJ2FuZHJvaWQuZ3JhcGhpY3MuZHJhd2FibGUuR3JhZGllbnREcmF3YWJsZS0+bmV3JyxcbiAgICAncmVxdWlyZWQnOiAnJyxcbiAgICAndmlld01ldGhvZCc6ICdzZXRCYWNrZ3JvdW5kLGdldEJhY2tncm91bmQnXG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/helpers/android/objMap.js\n");

/***/ }),

/***/ "./src/helpers/android/parseParams.js":
/*!********************************************!*\
  !*** ./src/helpers/android/parseParams.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar mapParams = __webpack_require__(/*! ./mapParams */ \"./src/helpers/android/mapParams.js\");\nvar objMap = __webpack_require__(/*! ./objMap */ \"./src/helpers/android/objMap.js\");\nvar callbackMapper = __webpack_require__(/*! ../common/callbackMapper */ \"./src/helpers/common/callbackMapper.js\");\n\nvar globalObjMap = {};\nvar command = \"\";\nvar elementType;\nvar getSetType;\n\nfunction isValidFontStyleFormat(font) {\n  try {\n    if (font == undefined) return false;\n    if (isNaN(parseInt(font))) {\n      return (/^\\w+[0-9a-zA-z\\-\\_]*[.](otf|ttf|xml)[,](assets|res)(\\/|$)/.test(font)\n      );\n    } else return (/^\\d+$/.test(font)\n    );\n  } catch (err) {}\n  return false;\n}\nfunction isURL(str) {\n  try {\n    var url = new URL(str);\n    return str.indexOf(\".\") != -1;\n  } catch (err) {\n    return false;\n  }\n}\nfunction attachFeedback(config, keys, i) {\n  var feedbackFn = function feedbackFn() {};\n\n  if (typeof config.feedback !== \"undefined\") {\n    if (config.feedback == \"true\") {\n      config.feedback = callbackMapper.map(feedbackFn);\n      window.__ALL_ONCLICKS.push(config.feedback);\n    }\n\n    return;\n  }\n\n  if (config.onClick) {\n    config.feedback = callbackMapper.map(feedbackFn);\n    window.__ALL_ONCLICKS.push(config.feedback);\n  }\n}\n\nfunction getConfigGroups(config) {\n  var groups = {};\n  var objType;\n  var isAnimation;\n  var widthFound = 0;\n  var heightFound = 0;\n  var paddingVal = config[\"padding\"];\n  if (config.stroke) delete config.padding;\n  if (config.margin) {\n    var margin = config.margin.split(',').map(function (a) {\n      return a * 1;\n    });\n    config.marginStart = margin[0] + '';\n    config.marginEnd = margin[2] + '';\n  }\n  var keys = Object.keys(config);\n  var proxyFnName;\n  for (var i = 0; i < keys.length; i++) {\n    attachFeedback(config, keys, i);\n\n    if (typeof config[keys[i]] == \"undefined\" || config[keys[i]] == null) {\n      delete config[keys[i]];\n    } else if (typeof config[keys[i]] == \"function\") {\n      if (keys[i] == \"afterRender\" && typeof window.removeAfterRenderProp == \"function\") {\n        /**\n         * if the function is present then we are handling afterRender\n         * prop in JS itself\n         */\n        window.removeAfterRenderProp(config[\"id\"], config[\"afterRender\"]);\n        delete config[\"afterRender\"];\n      } else {\n        config[keys[i]] = callbackMapper.map(config[keys[i]]);\n\n        if (keys[i] == \"onClick\") {\n          window.__FN_MAP[config[keys[i]]] = config.text || config.id || \"\";\n\n          if (!config.allowMultipleClicks || config.allowMultipleClick == \"false\") {\n            window.__THROTTELED_ACTIONS.push(config[keys[i]]);\n          }\n        }\n      }\n    } else {\n      if (keys[i].indexOf('_') && keys[i].split('_')[0] == 'a') {\n        objType = mapParams[keys[i].split('_')[1]];\n        isAnimation = true;\n      } else {\n        objType = mapParams[keys[i]];\n        isAnimation = false;\n      }\n\n      if (keys[i] == \"stroke\") {\n        (function () {\n          var padding = [0, 0, 0, 0];\n\n          if (paddingVal) padding = paddingVal.split(',').map(function (a) {\n            return a * 1;\n          });\n\n          var strokeValue = config[\"stroke\"].split(',')[0] * 1;\n          padding = padding.map(function (dim) {\n            return dim + strokeValue;\n          });\n          config[\"padding\"] = padding.join(',');\n          keys.push(\"padding\");\n        })();\n      }\n\n      if (objType) {\n        if (isAnimation) {\n          if (!groups['ANIMATION']) groups['ANIMATION'] = [];\n\n          groups['ANIMATION'].push({ key: keys[i].split('_')[1], value: config[keys[i]] });\n        } else {\n          if (!groups[objType.inVokedIn]) groups[objType.inVokedIn] = [];\n\n          if (keys[i] == \"width\") widthFound++;\n          if (keys[i] == \"height\") heightFound++;\n\n          groups[objType.inVokedIn].push({ key: keys[i], value: config[keys[i]] });\n        }\n\n        if (keys[i] !== \"pattern\" && keys[i] !== \"root\" && keys[i] !== \"id\" && keys[i] !== \"__filename\") {\n          delete config[keys[i]];\n        }\n      }\n    }\n  }\n\n  if (getSetType == \"set\") {\n    if (!groups.PARAMS) groups.PARAMS = [];\n\n    if (!widthFound) groups.PARAMS.push({ key: \"width\", value: 'wrap_content' });\n    if (!heightFound) groups.PARAMS.push({ key: \"height\", value: 'wrap_content' });\n  }\n\n  return groups;\n}\n\nfunction getCtr(viewGroup) {\n  var viewGroupMap = {\n    'linearLayout': 'android.widget.LinearLayout$LayoutParams->new',\n    'coordinatorLayout': 'androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams->new',\n    'scrollView': 'android.widget.LinearLayout$LayoutParams->new',\n    'horizontalScrollView': 'android.widget.LinearLayout$LayoutParams->new',\n    'relativeLayout': 'android.widget.RelativeLayout$LayoutParams->new',\n    'frameLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    'toolbar': 'android.support.v7.widget.Toolbar$LayoutParams->new',\n    'collapsingToolbarLayout': 'androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams->new',\n    'appBarLayout': 'android.support.design.widget.AppBarLayout$LayoutParams->new',\n    'view': 'android.widget.LinearLayout$LayoutParams->new',\n    'tabLayout': 'android.widget.LinearLayout$LayoutParams->new',\n    'viewPager': 'android.support.v4.view.ViewPager$LayoutParams->new',\n    'listView': 'android.widget.LinearLayout$LayoutParams->new',\n    'expandableListView': 'android.widget.LinearLayout$LayoutParams->new',\n    'recyclerView': 'android.support.v7.widget.RecyclerView$LayoutParams->new',\n    'ratingBar': 'android.widget.LinearLayout$LayoutParams->new',\n    'accordionLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    'swypeLayout': 'android.widget.FrameLayout$LayoutParams->new',\n    'swypeScroll': 'android.widget.LinearLayout$LayoutParams->new',\n    \"shimmerFrameLayout\": \"android.widget.FrameLayout$LayoutParams->new\",\n    \"bottomSheetLayout\": 'android.widget.FrameLayout$LayoutParams->new'\n  };\n\n  if (!viewGroupMap[viewGroup]) {\n    throw new Error(\"No such view group found : \" + viewGroup);\n  }\n\n  return viewGroupMap[viewGroup];\n}\n\nfunction handleSpecialChars(value) {\n  value = value.indexOf(',') > -1 ? value.replace(/\\,/g, '\\\\\\\\,') : value;\n  value = value.indexOf(':') > -1 ? value.replace(/\\:/g, '\\\\\\\\:') : value;\n  value = value.indexOf(':') > -1 ? value.replace(/\\=/g, '\\\\\\\\=') : value;\n  value = value.indexOf(';') > -1 ? value.replace(/\\;/g, '\\\\\\\\;') : value;\n\n  return value;\n}\n\nfunction appendArgs(attrs, obj) {\n  if (!obj.values) return \"\";\n\n  var args = \"\";\n  var value = attrs.key == \"text\" || attrs.key == \"hint\" ? attrs.value : attrs.value.replace(/ /g, '');\n\n  var incomingArgs;\n  if (attrs.key == \"text\" || attrs.key == \"hint\") {\n    incomingArgs = [];\n    incomingArgs.push(handleSpecialChars(value));\n  } else {\n    incomingArgs = value.split(',');\n  }\n\n  for (var i = 0; i < obj.values.length; i++) {\n    args += obj.values[i].type + '_';\n\n    if (obj.dontMap) args += incomingArgs[i] + ',';else {\n      if (obj.values[i].dontMap) {\n        args += incomingArgs[i] + ',';\n      } else if (attrs.key == \"width\" || attrs.key == \"height\") {\n        if (!isNaN(incomingArgs[i] * 1)) args = 'dp_' + incomingArgs[i] + ',';else args += obj.values[i][incomingArgs[i]] + ',';\n      } else {\n        args += obj.values[i][incomingArgs[i]] + ',';\n      }\n    }\n  }\n\n  return args.substring(0, args.length - 1);\n}\n\nfunction prepareCtr(attrs, belongsTo) {\n  var obj = objMap[belongsTo];\n  var ctr = globalObjMap[belongsTo].ctr;\n  var reqAttrs;\n\n  if (getSetType == \"get\" && (belongsTo == \"ANIMATION\" || belongsTo == \"DRAWABLE\" || belongsTo == \"PARAMS\")) {\n    return ctr;\n  }\n\n  if (!obj || !obj.required) return ctr;\n\n  reqAttrs = obj.required.split(',');\n\n  ctr += ':';\n\n  for (var i = 0; i < reqAttrs.length; i++) {\n    for (var j = 0; j < attrs.length; j++) {\n      if (reqAttrs[i].trim() == attrs[j].key) {\n        ctr += appendArgs(attrs[j], mapParams[reqAttrs[i].trim()]) + ',';\n      }\n    }\n  }\n\n  return ctr.substring(0, ctr.length - 1);\n}\n\nfunction parseHtml(text) {\n  return 'set_html=android.text.Html->fromHtml:s_' + text + ';';\n}\n\nfunction parseColor(color, setterName) {\n  if (!setterName) setterName = 'set_colorInt';\n  return setterName + '=android.graphics.Color->parseColor:s_' + color + ';';\n}\n\nfunction mashThis(attrs, obj, belongsTo, transformFn, allProps, type) {\n  if (getSetType == \"get\" && (attrs.key == \"width\" || attrs.key == \"height\")) {\n    // get case i.e during patch\n    if (!isNaN(attrs.value * 1)) {\n      return 'get_PARAMS->' + obj.varName + ':dp_' + attrs.value + ';get_view->setLayoutParams:get_PARAMS ';\n    } else {\n      return 'get_PARAMS->' + obj.varName + ':i_' + mapParams[attrs.key].values[0][attrs.value] + ';get_view->setLayoutParams:get_PARAMS ';\n    }\n  } else if (attrs.key == \"width\" || attrs.key == \"height\") {\n    // set case i.e first render\n    return '';\n  }\n\n  var beforeCmd = \"\";\n  var afterCmd = \"\";\n  var prePend = '';\n  var currTransVal;\n  var color;\n  var arr = [];\n  var res;\n  var values;\n\n  var keyWord;\n  var _cmd;\n  var finalCmd;\n  var color1;\n  attrs.value += '';\n\n  if (attrs.key == \"textSize\") {\n    attrs.value = \"1,\" + (attrs.value - 1);\n  }\n\n  //todo:tabTextColors\n  if (attrs.key == \"foreground\" || attrs.key == \"tabTextColors\" || attrs.key == \"selectedTabIndicatorColor\" || attrs.key == \"color\" || attrs.key == \"background\" || attrs.key == \"stroke\" || attrs.key == \"btnColor\") {\n\n    if (attrs.key == \"stroke\") {\n      color = attrs.value.split(',')[1];\n      currTransVal = appendArgs(attrs, obj).split(',')[0] + ',get_colorInt';\n    } else if (attrs.key == \"tabTextColors\") {\n      color = attrs.value.split(',')[0];\n      color1 = attrs.value.split(',')[1];\n      currTransVal = 'get_colorInt1' + ',get_colorInt';\n    } else {\n      color = attrs.value;\n      currTransVal = 'get_colorInt';\n    }\n\n    if (attrs.key == \"tabTextColors\") {\n      prePend = parseColor(color, \"set_colorInt1\") + ',' + parseColor(color1);\n    } else {\n      prePend = parseColor(color);\n    }\n  }\n  if (attrs.key == \"fontStyle\") {\n    if (isURL(attrs.value)) {\n      if (typeof window.__PROXY_FN == \"undefined\") {\n        window.__PROXY_FN = {};\n      }\n      var font = attrs.value.substr(attrs.value.lastIndexOf('/') + 1);\n\n      var filePresent = typeof JBridge.isFilePresent == \"function\" && JBridge.isFilePresent(font);\n      if (!filePresent) {\n        var callback = callbackMapper.map(function (isNew, url, fileName) {\n          var id = allProps.find(function (a) {\n            return a.key === \"id\";\n          });\n          if (!id) return;\n          var urlSetCommands = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedFile=java.io.File->new:get_directory,s_\" + fileName + \";\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dfont=android.graphics.Typeface->createFromFile:get_resolvedPath;\" + \"set_textV=ctx->findViewById:i_\" + id.value + \";\" + \"get_textV->setTypeface:get_dfont\";\n          Android.runInUI(urlSetCommands, null);\n        });\n        JBridge.renewFile(attrs.value, font, callback);\n      } else if (JBridge.getFilePath) {\n        prePend = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedFile=java.io.File->new:get_directory,s_\" + JBridge.getFilePath(font) + \";\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dfont=android.graphics.Typeface->createFromFile:get_resolvedPath;\";\n        currTransVal = \"get_dfont\";\n      }\n    } else {\n      prePend = \"set_ast=ctx->getAssets;set_type=android.graphics.Typeface->createFromAsset:get_ast,s_fonts\\/\" + attrs.value + \"\\.ttf;\";\n      currTransVal = \"get_type\";\n    }\n  }\n\n  if (attrs.key == \"font\") {\n    try {\n      if (isURL(attrs.value)) {\n        if (typeof window.__PROXY_FN == \"undefined\") {\n          window.__PROXY_FN = {};\n        }\n        var font = attrs.value.substr(attrs.value.lastIndexOf('/') + 1);\n\n        var filePresent = typeof JBridge.isFilePresent == \"function\" && JBridge.isFilePresent(font);\n        if (!filePresent) {\n          var callback = callbackMapper.map(function (isNew, url, fileName) {\n            var id = allProps.find(function (a) {\n              return a.key === \"id\";\n            });\n            if (!id) return;\n            var urlSetCommands = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedFile=java.io.File->new:get_directory,s_\" + fileName + \";\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dfont=android.graphics.Typeface->createFromFile:get_resolvedPath;\" + \"set_textV=ctx->findViewById:i_\" + id.value + \";\" + \"get_textV->setTypeface:get_dfont\";\n            Android.runInUI(urlSetCommands, null);\n          });\n          JBridge.renewFile(attrs.value, font, callback);\n        } else if (JBridge.getFilePath) {\n          prePend = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedFile=java.io.File->new:get_directory,s_\" + JBridge.getFilePath(font) + \";\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dfont=android.graphics.Typeface->createFromFile:get_resolvedPath;\";\n          currTransVal = \"get_dfont\";\n        }\n      } else {\n        if (attrs.value == \"\") throw \"font not provided\";\n        var fontPrefix = attrs.value.split(\",\")[0],\n            fontSuffix = attrs.value.split(\",\")[1];\n        if (fontPrefix == undefined || fontSuffix == undefined) throw \"Incorrect Font format\";\n        switch (fontPrefix) {\n          case \"name\":\n            prePend = \"set_ast=ctx->getAssets;set_type=android.graphics.Typeface->createFromAsset:get_ast,s_fonts\\/\" + fontSuffix + \"\\.ttf;\";\n            currTransVal = \"get_type\";\n            break;\n          case \"path\":\n            if (fontSuffix.indexOf(\"assets/\") != -1) {\n              var fontPath = fontSuffix.replace(\"assets/\", \"\");\n              prePend = \"set_ast=ctx->getAssets;set_type=android.graphics.Typeface->createFromAsset:get_ast,s_\" + fontPath + \";\";\n              currTransVal = \"get_type\";\n            } else if (fontSuffix.indexOf(\"res/\") != -1) {\n              var fontTempArr = fontSuffix.split(\"/\");\n              var fontResName = fontTempArr[fontTempArr.length - 1].split(\".\")[0];\n              prePend = \"set_pkgname=ctx->getPackageName;set_resobj=ctx->getResources;set_resid=get_resobj->getIdentifier:s_\" + fontResName + \",s_font,get_pkgname;set_type=get_resobj->getFont:get_resid;\";\n              currTransVal = \"get_type\";\n            }\n            break;\n          case \"resId\":\n            prePend = \"set_resobj=ctx->getResources;set_type=get_resobj->getFont:i_\" + fontSuffix + \";\";\n            currTransVal = \"get_type\";\n            break;\n        }\n      }\n    } catch (err) {\n      console.log(\"FONT_ERROR :: \" + \"error in fetching fonts : \" + err);\n    }\n  }\n\n  if (attrs.key == \"gradientAngle\") {\n    orientation += \"set_dr=this->getBackground;set_o=android.graphics.drawable.GradientDrawable$Orientation->valueOf:s_\" + attrs.value + \";\";\n    prePend += orientation;\n    currTransVal = \"get_o\";\n  }\n\n  if (attrs.key == \"gradient\") {\n    var gradientObj = JSON.parse(attrs.value);\n    var orientation = \"\";\n    if (gradientObj.type == \"linear\") {} else {}\n\n    var intClass = \"set_cc=java.lang.Class->forName:s_java.lang.Integer;\";\n    var arrList = \"set_arr=java.util.ArrayList->new;\";\n\n    prePend += gradientObj.values.map(function (color, i) {\n      return parseColor(color, \"set_color\" + i);\n    }).join(\"\");\n\n    arrList += gradientObj.values.map(function (color, i) {\n      return \"get_arr->add:get_color\" + i;\n    }).join(\";\");\n\n    prePend += \"set_gd=android.graphics.drawable.GradientDrawable->new;\";\n    prePend += arrList + \";\";\n    prePend += \"set_c=java.lang.Class->forName:s_java.lang.Integer;\";\n    prePend += \"infl->convertAndStoreArray:get_arr,get_c,s_pArr,b_true;\";\n    currTransVal = \"get_pArr\";\n  }\n\n  if (attrs.key == \"cornerRadii\") {\n    var cornerRadiis = attrs.value.split(',');\n    var cornerRadius = cornerRadiis.splice(0, 1);\n    var cornerRadiiArray = [];\n    for (var i = 0; i < cornerRadiis.length; ++i) {\n      cornerRadiiArray.push(cornerRadiis[i] * cornerRadius + \"\");\n      cornerRadiiArray.push(cornerRadiis[i] * cornerRadius + \"\");\n    }\n    var arrList = \"set_arr=java.util.ArrayList->new;\";\n    var floatArray = cornerRadiiArray.map(function (val, i) {\n      return \"set_cornerRadius=java.lang.Float->new:dpf_\" + val + \";get_arr->add:get_cornerRadius;\";\n    });\n    prePend += arrList + \";\";\n    prePend += \"set_c=java.lang.Class->forName:s_java.lang.Float;\";\n    prePend += floatArray.join(\"\");\n    prePend += \"infl->convertAndStoreArray:get_arr,get_c,s_pArr,b_true;\";\n    currTransVal = \"get_pArr\";\n  }\n\n  // shadowTag : level,tag\n  if (attrs.key == \"shadowTag\") {\n    var arr = attrs.value.split(\",\");\n    var tag = arr[1];\n    console.warn(\"YOOOO Shadow\", arr);\n\n    if (!window.shadowObject[tag]) {\n      window.shadowObject[tag] = { level: parseInt(arr[0]),\n        viewId: [],\n        backgroundColor: [],\n        blurValue: [],\n        shadowColor: [],\n        dx: [],\n        dy: [],\n        spread: [],\n        factor: []\n      };\n    } else {\n      window.shadowObject[tag][\"level\"] = parseInt(arr[0]);\n    }\n    return \"\";\n  }\n  //  -- int dx, int dy, int blurValue,  String shadowColor,  int spread, elevatiuon, float factor)\n  if (attrs.key == \"androidShadow\") {\n    var arr = attrs.value.split(\",\");\n\n    var tag = arr[6];\n\n    var __background = \"#ffffff\";\n    var __id = \"\";\n\n    for (var i = 0; i < allProps.length; i++) {\n      if (allProps[i].key == \"background\") {\n        __background = allProps[i].value;\n      } else if (allProps[i].key == \"id\") {\n        __id = allProps[i].value;\n      }\n    }\n\n    var factor = arr[5];\n    if (typeof JBridge.getPixels == \"function\") {\n      factor = JBridge.getPixels();\n    }\n    //   (viewId, backgroundColor, int blurValue,hadowColor, int dx, int dy, int spread, float factor)\n\n    if (!window.shadowObject[tag]) {\n      window.shadowObject[tag] = { level: -1,\n        viewId: [__id],\n        backgroundColor: [__background],\n        blurValue: [arr[2]],\n        shadowColor: [arr[3]],\n        dx: [arr[0]],\n        dy: [arr[1]],\n        spread: [arr[4]],\n        factor: [factor]\n      };\n    } else {\n      window.shadowObject[tag][\"viewId\"].push(__id);\n      window.shadowObject[tag][\"backgroundColor\"].push(__background);\n      window.shadowObject[tag][\"blurValue\"].push(arr[2]);\n      window.shadowObject[tag][\"shadowColor\"].push(arr[3]);\n      window.shadowObject[tag][\"dx\"].push(arr[0]);\n      window.shadowObject[tag][\"dy\"].push(arr[1]);\n      window.shadowObject[tag][\"spread\"].push(arr[4]);\n      window.shadowObject[tag][\"factor\"].push(arr[5]);\n    }\n\n    return \"\";\n  }\n\n  if (attrs.key == \"letterSpacing\") {\n    attrs.value = attrs.value / 9 + \"\";\n  }\n\n  if (attrs.key == \"dividerDrawable\") {\n    prePend = \"set_342372=ctx->getPackageName;set_res=ctx->getResources;set_368248=get_res->getIdentifier:s_\" + attrs.value + \",s_drawable,get_342372;set_res=ctx->getResources;set_482380=get_res->getDrawable:get_368248;\";\n    currTransVal = \"get_482380\";\n  }\n\n  if (attrs.key == \"textFromHtml\") {\n    prePend = parseHtml(handleSpecialChars(attrs.value));\n    currTransVal = 'get_html';\n  }\n\n  if (attrs.key == \"backgroundTint\") {\n    color = attrs.value;\n    prePend = parseColor(color) + 'set_colorstate=android.content.res.ColorStateList->valueOf:get_colorInt;';\n    currTransVal = 'get_colorstate';\n  }\n\n  if (attrs.key == \"typeface\") {\n    prePend = \"set_face=this->getTypeface;\";\n    currTransVal = 'get_face,' + appendArgs(attrs, obj);\n  }\n\n  if (attrs.key == \"buttonTint\") {\n    color = attrs.value;\n    prePend = parseColor(color) + 'set_colorstate=android.content.res.ColorStateList->valueOf:get_colorInt;';\n    currTransVal = 'get_colorstate';\n  }\n\n  if (attrs.key == \"hintColor\") {\n    color = attrs.value;\n    prePend = parseColor(color) + 'set_colorstate=android.content.res.ColorStateList->valueOf:get_colorInt;';\n    currTransVal = 'get_colorstate';\n  }\n\n  if (attrs.key == \"btnBackground\") {\n    color = attrs.value;\n    prePend = 'set_mode=android.graphics.PorterDuff->intToMode:i_9;' + parseColor(color);\n    currTransVal = 'get_colorInt,get_mode';\n  }\n\n  if (attrs.key == \"selectableItem\") {\n    color = attrs.value;\n    prePend = \"set_outv=android.util.TypedValue->new;set_theme=ctx->getTheme;get_theme->resolveAttribute:i_16843534,get_outv,b_true;set_c=get_outv->getClass;set_f=get_c->getDeclaredField:s_resourceId;get_f->setAccessible:b_true;set_v=get_f->get:get_outv;\";\n    currTransVal = 'get_v';\n  }\n\n  if (attrs.key == \"url\") {\n    prePend = \"set_Setting=this->getSettings;get_Setting->setJavaScriptEnabled:b_true;get_Setting->setDomStorageEnabled:b_true;\";\n    var convertToString = \"set_1127=android.util.Base64->decode:s_\" + btoa(attrs.value) + \",i_0;set_url=java.lang.String->new:get_1127;\";\n    prePend += convertToString;\n    currTransVal = \"get_url\";\n  }\n\n  if (attrs.key == \"packageIcon\") {\n    prePend = \"set_PM=ctx->getPackageManager;set_AI=get_PM->getApplicationInfo:s_\" + attrs.value + \",i_0;set_11747=get_AI->loadIcon:get_PM;\";\n    currTransVal = \"get_11747\";\n  }\n\n  if (attrs.key == \"imageUrl\") {\n\n    if (isURL(attrs.value)) {\n      if (typeof window.__PROXY_FN == \"undefined\") {\n        window.__PROXY_FN = {};\n      }\n      var image = attrs.value.substr(attrs.value.lastIndexOf('/') + 1);\n      var callback = \"onImage\" + image.substr(0, image.indexOf('.'));\n\n      var filePresent = typeof JBridge.isFilePresent == \"function\" && JBridge.isFilePresent(image);\n      if (!filePresent) {\n        var callback = callbackMapper.map(function (isNew, url, fileName) {\n          var id = allProps.find(function (a) {\n            return a.key === \"id\";\n          });\n          if (!id) return;\n          var urlSetCommands = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedFile=java.io.File->new:get_directory,s_\" + fileName + \";\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dimage=android.graphics.drawable.Drawable->createFromPath:get_resolvedPath;\" + \"set_imgV=ctx->findViewById:i_\" + id.value + \";\" + \"get_imgV->setImageDrawable:get_dimage\";\n          Android.runInUI(urlSetCommands, null);\n        });\n        JBridge.renewFile(attrs.value, image, callback);\n      } else if (JBridge.getFilePath) {\n        prePend = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedFile=java.io.File->new:get_directory,s_\" + JBridge.getFilePath(image) + \";\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dimage=android.graphics.drawable.Drawable->createFromPath:get_resolvedPath;\";\n        currTransVal = \"get_dimage\";\n      }\n    } else {\n      prePend = \"set_342372=ctx->getPackageName;set_res=ctx->getResources;set_368248=get_res->getIdentifier:s_\" + attrs.value + \",s_drawable,get_342372;set_res=ctx->getResources;set_482380=get_res->getDrawable:get_368248;\";\n      currTransVal = \"get_482380\";\n    }\n  }\n\n  if (attrs.key == \"defaultImage\") {\n    prePend = \"set_342372=ctx->getPackageName;set_res=ctx->getResources;set_368248=get_res->getIdentifier:s_\" + attrs.value + \",s_drawable,get_342372;set_res=ctx->getResources;set_482380=get_res->getDrawable:get_368248;\";\n    currTransVal = \"get_482380\";\n  }\n\n  if (attrs.key == \"placeHolder\") {\n    prePend = \"set_342372=ctx->getPackageName;set_res=ctx->getResources;set_368248=get_res->getIdentifier:s_\" + attrs.value + \",s_drawable,get_342372;set_res=ctx->getResources;set_482380=get_res->getDrawable:get_368248;\";\n    currTransVal = \"get_482380\";\n  }\n\n  if (attrs.key == \"dynamicUrl\") {\n    prePend = \"set_directory=ctx->getDir:s_juspay,i_0;\" + \"set_resolvedName=in.juspay.hypersdk.services.FileProviderService->appendSdkNameAndVersion:s_\" + attrs.value + \";\" + \"set_resolvedFile=java.io.File->new:get_directory,get_resolvedName;\" + \"set_resolvedPath=get_resolvedFile->toString;\" + \"set_dimage=android.graphics.drawable.Drawable->createFromPath:get_resolvedPath;\";\n\n    currTransVal = \"get_dimage\";\n  }\n\n  if (attrs.key == \"backgroundDrawable\") {\n    prePend = \"set_342372=ctx->getPackageName;set_res=ctx->getResources;set_368248=get_res->getIdentifier:s_\" + attrs.value + \",s_drawable,get_342372;set_res=ctx->getResources;set_482380=get_res->getDrawable:get_368248;\";\n    currTransVal = \"get_482380\";\n  }\n\n  if (attrs.key == \"fontFamily\") {\n    attrs.value = appendArgs(attrs, obj);\n    values = attrs.value.split(',');\n    return \"set_fontFace=android.graphics.Typeface->create:\" + values[0] + \",\" + values[1] + \";\" + \"this->setTypeface:get_fontFace,\" + values[1] + \";\";\n  }\n\n  if (attrs.key == \"fontSize\") {\n    currTransVal = appendArgs(attrs, obj).split(',')[0] + ',f_' + window.__WIDTH * attrs.value.split(',')[1] * 1 / 100;\n  }\n\n  if (attrs.key == \"curve\") {\n    prePend = \"set_interp=android.view.animation.DecelerateInterpolator->new;\";\n    currTransVal = \"get_interp\";\n  }\n\n  if (attrs.key == \"shimmer\") {\n    try {\n      var shimmerMode = \"com.facebook.shimmer.Shimmer$ColorHighlightBuilder\";\n      var shimmerCmd = \"set_sdrw=com.facebook.shimmer.ShimmerDrawable->new;\";\n      var shimmerJson = JSON.parse(attrs.value);\n      console.log(shimmerJson, shimmerJson.contents, attrs, attrs, obj, belongsTo, transformFn, allProps, type);\n      // if(shimmerJson && shimmerJson.contents){\n\n      shimmerJson = shimmerJson.contents;\n      // }\n      if (shimmerJson && shimmerJson.shimmerType == \"alpha\") {\n        shimmerMode = \"com.facebook.shimmer.Shimmer$AlphaHighlightBuilder\";\n        shimmerCmd += \"set_builder=\" + shimmerMode + \"->new;\";\n        if (shimmerJson.base) {\n          shimmerCmd += \"get_builder->setBaseAlpha:f_\" + shimmerJson.base + \";\";\n        }\n        if (shimmerJson.highlight) {\n          shimmerCmd += \"get_builder->setHighlightAlpha:f_\" + shimmerJson.highlight + \";\";\n        }\n      } else {\n        shimmerCmd += \"set_builder=\" + shimmerMode + \"->new;\";\n        if (shimmerJson.base) {\n          shimmerCmd += parseColor(shimmerJson.base, \"set_baseColor\") + \";\";\n          shimmerCmd += \"get_builder->setBaseColor:get_baseColor;\";\n        }\n        if (shimmerJson.highlight) {\n          shimmerCmd += parseColor(shimmerJson.highlight, \"set_baseColor\") + \";\";\n          shimmerCmd += \"get_builder->setHighlightColor:get_baseColor;\";\n        }\n      }\n\n      if (shimmerJson.tilt) {\n        shimmerCmd += \"get_builder->setTilt:f_\" + shimmerJson.tilt + \";\";\n      }\n      if (shimmerJson.intensity) {\n        shimmerCmd += \"get_builder->setIntensity:f_\" + shimmerJson.intensity + \";\";\n      }\n      if (shimmerJson.direction) {\n        shimmerCmd += \"get_builder->setDirection:i_\" + shimmerJson.direction + \";\";\n      }\n      if (shimmerJson.duration) {\n        shimmerCmd += \"get_builder->setDuration:l_\" + shimmerJson.direction + \";\";\n      }\n      if (shimmerJson.repeatCount) {\n        shimmerCmd += \"get_builder->setRepeatCount:i_\" + shimmerJson.repeatCount + \";\";\n      }\n      if (shimmerJson.repeatDelay) {\n        shimmerCmd += \"get_builder->setRepeatDelay:l_\" + shimmerJson.repeatDelay + \";\";\n      }\n      if (shimmerJson.clipToChildren) {\n        shimmerCmd += \"get_builder->setClipToChildren:b_\" + shimmerJson.clipToChildren + \";\";\n      }\n      if (shimmerJson.shape) {\n        shimmerCmd += \"get_builder->setShape:i_\" + shimmerJson.shape + \";\";\n      }\n      if (shimmerJson.dropOff) {\n        shimmerCmd += \"get_builder->setDropoff:f_\" + shimmerJson.dropOff + \";\";\n      }\n      shimmerCmd += \"set_shimmer=get_builder->build;\";\n      if (type == \"shimmerFrameLayout\") {\n        attrs.key = \"shimmerView\";\n        currTransVal = \"get_shimmer\";\n        obj.fnName = obj.alternateFnName;\n      } else {\n        shimmerCmd += \"get_sdrw->setShimmer:get_shimmer;\";\n        if (shimmerJson.active) {\n          afterCmd += \"get_sdrw->startShimmer;\";\n        } else {\n          afterCmd += \"get_sdrw->stopShimmer;\";\n        }\n        currTransVal = \"get_sdrw\";\n      }\n    } catch (e) {\n      console.error(\"unable to set shimmer\");\n    }\n    console.log(shimmerCmd);\n    prePend = shimmerCmd;\n  }\n\n  if (attrs.key == \"focus\") {\n    afterCmd = \"set_win=ctx->getWindow;get_win->setSoftInputMode:5;\";\n  }\n\n  if (attrs.key == \"shadowLayer\") {\n    color = attrs.value.split(',')[3];\n    arr = appendArgs(attrs, obj).split(',');\n    arr.splice(arr.length1, 1);\n\n    prePend = parseColor(color);\n    currTransVal = arr.join(',') + ',get_colorInt';\n  }\n\n  if (attrs.key == \"values\") {\n    var val = attrs.value.split(\",\");\n    var valuesStr = \"\",\n        i;\n    for (i = 0; i < val.length; i++) {\n      var elements = val[i].split(\":\");\n      valuesStr += \"get_spinnerArray->add:s_\" + elements[0];\n      for (var j = 1; j < elements.length; j++) {\n        valuesStr += \"\\n\" + elements[j];\n      }valuesStr += \";\";\n    }\n    prePend = \"set_spinnerArray=java.util.ArrayList->new;\" + valuesStr + \"set_spinnerValues=get_spinnerArray->toArray;set_spinnerAdapter=android.widget.ArrayAdapter->new:ctx_ctx,i_17367043,get_spinnerValues;\";\n    currTransVal = \"get_spinnerAdapter\";\n  }\n\n  if (attrs.key == \"startPoint\") {\n    var arg = JSON.parse(attrs.value);\n    prePend = \"this->setStartX:f_\" + arg.x + \";\";\n    prePend += \"this->setStartY:f_\" + arg.y + \";\";\n    return prePend;\n  }\n\n  if (attrs.key == \"endPoint\") {\n    var arg = JSON.parse(attrs.value);\n    prePend = \"this->setEndX:f_\" + arg.x + \";\";\n    prePend += \"this->setEndY:f_\" + arg.y + \";\";\n    return prePend;\n  }\n\n  if (belongsTo == \"VIEW\") keyWord = globalObjMap[belongsTo].val;else keyWord = 'get_' + globalObjMap[belongsTo].val;\n\n  if (transformFn || attrs.key == \"duration\" || attrs.key == \"delay\" || attrs.key == \"curve\") _cmd = keyWord + '->' + (typeof obj.fnName == \"undefined\" ? obj.varName : obj.fnName);else _cmd = keyWord + '->' + attrs.key;\n\n  if (obj.values && obj.values.length) _cmd += ':';\n\n  if (!prePend && !currTransVal) _cmd += appendArgs(attrs, obj) + ';';else _cmd += currTransVal + ';';\n\n  // for testing\n  if (typeof finalCmd !== \"undefined\") {\n    console.log(beforeCmd + prePend + _cmd + afterCmd);\n    return finalCmd;\n  }\n  if (type == \"shimmerFrameLayout\") {\n    console.log(beforeCmd + prePend + _cmd + afterCmd);\n  }\n  return beforeCmd + prePend + _cmd + afterCmd;\n}\n\nfunction parseAttrs(attrs, belongsTo, transformFn, type) {\n  var obj;\n  var retVal;\n  var cmd = '';\n  var _cmd;\n\n  for (var i = 0; i < attrs.length; i++) {\n    obj = mapParams[attrs[i].key];\n    if (obj) {\n      cmd += mashThis(attrs[i], obj, belongsTo, transformFn, attrs, type);\n    }\n  }\n\n  if (belongsTo == \"VIEW\") return cmd;\n\n  return prepareCtr(attrs, belongsTo) + ';' + cmd;\n}\n\nfunction parseGroups(type, groups, config) {\n  var keys = Object.keys(groups);\n  var ctr;\n\n  for (var i = 0; i < keys.length; i++) {\n    if (keys[i] == \"FOREGROUND\") {\n      if (!globalObjMap[keys[i]]) {\n        if (getSetType == \"set\") {\n          globalObjMap[keys[i]] = { ctr: \"android.graphics.drawable.GradientDrawable->new\", val: keys[i] };\n          command += 'set_' + globalObjMap[keys[i]].val + '=' + parseAttrs(groups[keys[i]], keys[i], true, type) + 'this->' + \"setForeground\" + ':' + 'get_' + globalObjMap[keys[i]].val + ';';\n        } else {\n          globalObjMap[keys[i]] = { ctr: 'get_view->getForeground', val: keys[i] };\n          command += 'set_' + globalObjMap[keys[i]].val + '=' + parseAttrs(groups[keys[i]], keys[i], true, type);\n        }\n      }\n    } else if (keys[i] == \"LAYOUT_TRANSITION\") {\n      globalObjMap.LAYOUT_TRANSITION = { ctr: 'android.animation.LayoutTransition->new', val: \"LAYOUT_TRANSITION\" };\n      command += 'set_' + globalObjMap.LAYOUT_TRANSITION.val + '=' + parseAttrs(groups.PARAMS, 'LAYOUT_TRANSITION', true, type) + 'this->' + \"setLayoutTransition\" + ':get_' + globalObjMap.LAYOUT_TRANSITION.val + ';';\n    } else if (keys[i] == \"VIEW\") {\n      if (!globalObjMap.VIEW) {\n        if (getSetType == \"set\") globalObjMap.VIEW = { ctr: \"this\", val: \"this\" };else globalObjMap.VIEW = { ctr: \"get_view\", val: \"get_view\" };\n      }\n\n      command += parseAttrs(groups.VIEW, 'VIEW', true, type);\n    } else if (keys[i] == \"PARAMS\") {\n      if (getSetType == \"set\") {\n        if (!globalObjMap.PARAMS) {\n          ctr = config.root ? getCtr(type) : 'PARAM_CTR_HOLDER';\n          globalObjMap.PARAMS = { ctr: ctr, val: \"PARAMS\" };\n        }\n\n        command += 'set_' + globalObjMap.PARAMS.val + '=' + parseAttrs(groups.PARAMS, 'PARAMS', true, type) + 'this->' + objMap.PARAMS.viewMethod.split(',')[0] + ':get_' + globalObjMap.PARAMS.val + ';';\n      } else {\n        if (!globalObjMap.PARAMS) {\n          ctr = \"get_view->getLayoutParams\";\n          globalObjMap.PARAMS = { ctr: ctr, val: \"PARAMS\" };\n        }\n\n        command += 'set_' + globalObjMap.PARAMS.val + '=' + parseAttrs(groups[keys[i]], keys[i], true, type);\n      }\n    } else if (keys[i] == \"MUTATEBG\") {\n      if (!globalObjMap.MUTATEBG) {\n        globalObjMap.MUTATEBG = { ctr: 'this->getBackground', val: \"MUTATEBG\" };\n      }\n\n      command += 'set_' + globalObjMap.MUTATEBG.val + '=' + parseAttrs(groups[keys[i]], keys[i], true, type);\n    } else if (keys[i] == \"ANIMATION\") {\n      if (!globalObjMap.ANIMATION) {\n        if (getSetType == \"set\") globalObjMap.ANIMATION = { ctr: 'this->animate', val: \"ANIMATION\" };else globalObjMap.ANIMATION = { ctr: 'get_view->animate', val: \"ANIMATION\" };\n      }\n\n      command += 'set_' + globalObjMap.ANIMATION.val + '=' + parseAttrs(groups[keys[i]], keys[i], false, type);\n    } else {\n      // Works only for drawable\n      if (!globalObjMap[keys[i]]) {\n        if (getSetType == \"set\") {\n          globalObjMap[keys[i]] = { ctr: objMap[keys[i]].ctr, val: keys[i] };\n          command += 'set_' + globalObjMap[keys[i]].val + '=' + parseAttrs(groups[keys[i]], keys[i], true, type) + 'this->' + objMap[keys[i]].viewMethod.split(',')[0] + ':' + 'get_' + globalObjMap[keys[i]].val + ';';\n        } else {\n          globalObjMap[keys[i]] = { ctr: 'get_view->getBackground', val: keys[i] };\n          command += 'set_' + globalObjMap[keys[i]].val + '=' + parseAttrs(groups[keys[i]], keys[i], true, type);\n        }\n      }\n    }\n  }\n  return command.substring(0, command.length - 1);\n}\n\nvar flattenObject = function flattenObject(ob) {\n  var toReturn = {};\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n    if (_typeof(ob[i]) == 'object') {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n        toReturn[x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n};\n\nmodule.exports = function (type, config, _getSetType) {\n  config = flattenObject(config);\n  getSetType = _getSetType;\n  elementType = type;\n\n  var groups = getConfigGroups(config);\n\n  command = '';\n  globalObjMap = {};\n\n  var flag = 0;\n  var keys = Object.keys(config);\n  for (var i = 0; i < keys.length; i++) {\n    if (keys[i] == 'runInUI') {\n      flag = 1;\n      break;\n    }\n  }\n\n  if (!flag) {\n    config.runInUI = parseGroups(type, groups, config);\n  }\n\n  return config;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/helpers/android/parseParams.js\n");

/***/ }),

/***/ "./src/helpers/common/callbackMapper.js":
/*!**********************************************!*\
  !*** ./src/helpers/common/callbackMapper.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n * Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n * JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n *\n * This file is part of JUSPAY Platform.\n *\n * JUSPAY Platform is free software: you can redistribute it and/or modify\n * it for only educational purposes under the terms of the GNU Affero General\n * Public License (GNU AGPL) as published by the Free Software Foundation,\n * either version 3 of the License, or (at your option) any later version.\n * For Enterprise/Commerical licenses, contact <info@juspay.in>.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n * be liable for all damages without limitation, which is caused by the\n * ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n * damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n * The end user has NO right to claim any indemnification based on its use\n * of Licensed Software. See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n */\n\nmodule.exports.map = function (fn) {\n  console.log(\"callbackMapper called\");\n  console.log(\"document location is\", document.location);\n  if (typeof window.__FN_INDEX !== 'undefined' && window.__FN_INDEX !== null) {\n    var proxyFnName = 'F' + window.__FN_INDEX;\n    if (window.__payload && window.__payload.service) {\n      proxyFnName = window.__payload.service + \"_\" + proxyFnName;\n    }\n    window.__PROXY_FN[proxyFnName] = fn;\n    window.__FN_INDEX++;\n\n    var moreFruits = Object.assign({}, window.__PROXY_FN);\n    console.log(\"callbackMapper is\", moreFruits);\n    return proxyFnName;\n  } else {\n    throw new Error(\"Please initialise window.__FN_INDEX = 0 in index.js of your project.\");\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9jb21tb24vY2FsbGJhY2tNYXBwZXIuanM/ZGU4MyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWFwIiwiZm4iLCJjb25zb2xlIiwibG9nIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsIndpbmRvdyIsIl9fRk5fSU5ERVgiLCJwcm94eUZuTmFtZSIsIl9fcGF5bG9hZCIsInNlcnZpY2UiLCJfX1BST1hZX0ZOIiwibW9yZUZydWl0cyIsIk9iamVjdCIsImFzc2lnbiIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBQSxPQUFPQyxPQUFQLENBQWVDLEdBQWYsR0FBcUIsVUFBQ0MsRUFBRCxFQUFRO0FBQzVCQyxVQUFRQyxHQUFSLENBQVksdUJBQVo7QUFDQUQsVUFBUUMsR0FBUixDQUFZLHNCQUFaLEVBQW1DQyxTQUFTQyxRQUE1QztBQUNBLE1BQUcsT0FBT0MsT0FBT0MsVUFBZCxLQUE2QixXQUE3QixJQUE0Q0QsT0FBT0MsVUFBUCxLQUFzQixJQUFyRSxFQUEyRTtBQUMxRSxRQUFJQyxjQUFjLE1BQU1GLE9BQU9DLFVBQS9CO0FBQ0EsUUFBSUQsT0FBT0csU0FBUCxJQUFvQkgsT0FBT0csU0FBUCxDQUFpQkMsT0FBekMsRUFBaUQ7QUFDaERGLG9CQUFjRixPQUFPRyxTQUFQLENBQWlCQyxPQUFqQixHQUEyQixHQUEzQixHQUFpQ0YsV0FBL0M7QUFDQTtBQUNERixXQUFPSyxVQUFQLENBQWtCSCxXQUFsQixJQUFpQ1AsRUFBakM7QUFDRUssV0FBT0MsVUFBUDs7QUFFQSxRQUFJSyxhQUFhQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQlIsT0FBT0ssVUFBekIsQ0FBakI7QUFDQ1QsWUFBUUMsR0FBUixDQUFZLG1CQUFaLEVBQWdDUyxVQUFoQztBQUNILFdBQU9KLFdBQVA7QUFDQSxHQVhELE1BV087QUFDTixVQUFNLElBQUlPLEtBQUosQ0FBVSxzRUFBVixDQUFOO0FBQ0E7QUFDRCxDQWpCRCIsImZpbGUiOiIuL3NyYy9oZWxwZXJzL2NvbW1vbi9jYWxsYmFja01hcHBlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBcIkpVU1BBWSBUZWNobm9sb2dpZXNcIlxuICogSlVTUEFZIFRlY2hub2xvZ2llcyBQdnQuIEx0ZC4gW2h0dHBzOi8vd3d3Lmp1c3BheS5pbl1cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBKVVNQQVkgUGxhdGZvcm0uXG4gKlxuICogSlVTUEFZIFBsYXRmb3JtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IGZvciBvbmx5IGVkdWNhdGlvbmFsIHB1cnBvc2VzIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsXG4gKiBQdWJsaWMgTGljZW5zZSAoR05VIEFHUEwpIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLFxuICogZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqIEZvciBFbnRlcnByaXNlL0NvbW1lcmljYWwgbGljZW5zZXMsIGNvbnRhY3QgPGluZm9AanVzcGF5LmluPi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBUaGUgZW5kIHVzZXIgd2lsbFxuICogYmUgbGlhYmxlIGZvciBhbGwgZGFtYWdlcyB3aXRob3V0IGxpbWl0YXRpb24sIHdoaWNoIGlzIGNhdXNlZCBieSB0aGVcbiAqIEFCVVNFIG9mIHRoZSBMSUNFTlNFRCBTT0ZUV0FSRSBhbmQgc2hhbGwgSU5ERU1OSUZZIEpVU1BBWSBmb3Igc3VjaFxuICogZGFtYWdlcywgY2xhaW1zLCBjb3N0LCBpbmNsdWRpbmcgcmVhc29uYWJsZSBhdHRvcm5leSBmZWUgY2xhaW1lZCBvbiBKdXNwYXkuXG4gKiBUaGUgZW5kIHVzZXIgaGFzIE5PIHJpZ2h0IHRvIGNsYWltIGFueSBpbmRlbW5pZmljYXRpb24gYmFzZWQgb24gaXRzIHVzZVxuICogb2YgTGljZW5zZWQgU29mdHdhcmUuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC5odG1sPi5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5tYXAgPSAoZm4pID0+IHtcblx0Y29uc29sZS5sb2coXCJjYWxsYmFja01hcHBlciBjYWxsZWRcIik7XG5cdGNvbnNvbGUubG9nKFwiZG9jdW1lbnQgbG9jYXRpb24gaXNcIixkb2N1bWVudC5sb2NhdGlvbik7IFxuXHRpZih0eXBlb2Ygd2luZG93Ll9fRk5fSU5ERVggIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX0ZOX0lOREVYICE9PSBudWxsKSB7XG5cdFx0dmFyIHByb3h5Rm5OYW1lID0gJ0YnICsgd2luZG93Ll9fRk5fSU5ERVg7XG5cdFx0aWYgKHdpbmRvdy5fX3BheWxvYWQgJiYgd2luZG93Ll9fcGF5bG9hZC5zZXJ2aWNlKXtcblx0XHRcdHByb3h5Rm5OYW1lID0gd2luZG93Ll9fcGF5bG9hZC5zZXJ2aWNlICsgXCJfXCIgKyBwcm94eUZuTmFtZTtcblx0XHR9XG5cdFx0d2luZG93Ll9fUFJPWFlfRk5bcHJveHlGbk5hbWVdID0gZm47XG5cdCAgXHR3aW5kb3cuX19GTl9JTkRFWCsrO1xuXG5cdCAgXHR2YXIgbW9yZUZydWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIHdpbmRvdy5fX1BST1hZX0ZOKTtcbiAgICBcdGNvbnNvbGUubG9nKFwiY2FsbGJhY2tNYXBwZXIgaXNcIixtb3JlRnJ1aXRzKTsgXG5cdFx0cmV0dXJuIHByb3h5Rm5OYW1lO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBpbml0aWFsaXNlIHdpbmRvdy5fX0ZOX0lOREVYID0gMCBpbiBpbmRleC5qcyBvZiB5b3VyIHByb2plY3QuXCIpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/helpers/common/callbackMapper.js\n");

/***/ }),

/***/ "./src/helpers/common/index.js":
/*!*************************************!*\
  !*** ./src/helpers/common/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nmodule.exports = {\n\tcallbackMapper: __webpack_require__(/*! ./callbackMapper */ \"./src/helpers/common/callbackMapper.js\")\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9jb21tb24vaW5kZXguanM/OWFkYyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2tNYXBwZXIiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2hCQyxpQkFBaUJDLG1CQUFPQSxDQUFDLGdFQUFSO0FBREQsQ0FBakIiLCJmaWxlIjoiLi9zcmMvaGVscGVycy9jb21tb24vaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBcIkpVU1BBWSBUZWNobm9sb2dpZXNcIlxuKiBKVVNQQVkgVGVjaG5vbG9naWVzIFB2dC4gTHRkLiBbaHR0cHM6Ly93d3cuanVzcGF5LmluXVxuKlxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBKVVNQQVkgUGxhdGZvcm0uXG4qXG4qIEpVU1BBWSBQbGF0Zm9ybSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4qIGl0IGZvciBvbmx5IGVkdWNhdGlvbmFsIHB1cnBvc2VzIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsXG4qIFB1YmxpYyBMaWNlbnNlIChHTlUgQUdQTCkgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sXG4qIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4qIEZvciBFbnRlcnByaXNlL0NvbW1lcmljYWwgbGljZW5zZXMsIGNvbnRhY3QgPGluZm9AanVzcGF5LmluPi5cbipcbiogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4qIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4qIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRoZSBlbmQgdXNlciB3aWxsXG4qIGJlIGxpYWJsZSBmb3IgYWxsIGRhbWFnZXMgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGljaCBpcyBjYXVzZWQgYnkgdGhlXG4qIEFCVVNFIG9mIHRoZSBMSUNFTlNFRCBTT0ZUV0FSRSBhbmQgc2hhbGwgSU5ERU1OSUZZIEpVU1BBWSBmb3Igc3VjaFxuKiBkYW1hZ2VzLCBjbGFpbXMsIGNvc3QsIGluY2x1ZGluZyByZWFzb25hYmxlIGF0dG9ybmV5IGZlZSBjbGFpbWVkIG9uIEp1c3BheS5cbiogVGhlIGVuZCB1c2VyIGhhcyBOTyByaWdodCB0byBjbGFpbSBhbnkgaW5kZW1uaWZpY2F0aW9uIGJhc2VkIG9uIGl0cyB1c2Vcbiogb2YgTGljZW5zZWQgU29mdHdhcmUuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4qXG4qIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC5odG1sPi5cbiovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjYWxsYmFja01hcHBlciA6IHJlcXVpcmUoXCIuL2NhbGxiYWNrTWFwcGVyXCIpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/helpers/common/index.js\n");

/***/ }),

/***/ "./src/helpers/index.js":
/*!******************************!*\
  !*** ./src/helpers/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n* Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n*\n* This file is part of JUSPAY Platform.\n*\n* JUSPAY Platform is free software: you can redistribute it and/or modify\n* it for only educational purposes under the terms of the GNU Affero General\n* Public License (GNU AGPL) as published by the Free Software Foundation,\n* either version 3 of the License, or (at your option) any later version.\n* For Enterprise/Commerical licenses, contact <info@juspay.in>.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n* be liable for all damages without limitation, which is caused by the\n* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n* damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n* The end user has NO right to claim any indemnification based on its use\n* of Licensed Software. See the GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n*/\n\nvar helpers = {\n\tcommon: __webpack_require__(/*! ./common */ \"./src/helpers/common/index.js\")\n};\n\nif (true) {\n\thelpers.android = __webpack_require__(/*! ./android */ \"./src/helpers/android/index.js\");\n} else {}\n\nmodule.exports = helpers;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9pbmRleC5qcz9jZTk2Il0sIm5hbWVzIjpbImhlbHBlcnMiLCJjb21tb24iLCJyZXF1aXJlIiwid2luZG93IiwiYW5kcm9pZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsSUFBTUEsVUFBVTtBQUNmQyxTQUFTQyxtQkFBT0EsQ0FBQywrQ0FBUjtBQURNLENBQWhCOztBQUtBLElBQUlDLElBQUosRUFBOEI7QUFDN0JILFNBQVFJLE9BQVIsR0FBa0JGLG1CQUFPQSxDQUFDLGlEQUFSLENBQWxCO0FBQ0EsQ0FGRCxNQUdLLEVBS0o7O0FBR0RHLE9BQU9DLE9BQVAsR0FBaUJOLE9BQWpCIiwiZmlsZSI6Ii4vc3JjL2hlbHBlcnMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBcIkpVU1BBWSBUZWNobm9sb2dpZXNcIlxuKiBKVVNQQVkgVGVjaG5vbG9naWVzIFB2dC4gTHRkLiBbaHR0cHM6Ly93d3cuanVzcGF5LmluXVxuKlxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBKVVNQQVkgUGxhdGZvcm0uXG4qXG4qIEpVU1BBWSBQbGF0Zm9ybSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4qIGl0IGZvciBvbmx5IGVkdWNhdGlvbmFsIHB1cnBvc2VzIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsXG4qIFB1YmxpYyBMaWNlbnNlIChHTlUgQUdQTCkgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sXG4qIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4qIEZvciBFbnRlcnByaXNlL0NvbW1lcmljYWwgbGljZW5zZXMsIGNvbnRhY3QgPGluZm9AanVzcGF5LmluPi5cbipcbiogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4qIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4qIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRoZSBlbmQgdXNlciB3aWxsXG4qIGJlIGxpYWJsZSBmb3IgYWxsIGRhbWFnZXMgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGljaCBpcyBjYXVzZWQgYnkgdGhlXG4qIEFCVVNFIG9mIHRoZSBMSUNFTlNFRCBTT0ZUV0FSRSBhbmQgc2hhbGwgSU5ERU1OSUZZIEpVU1BBWSBmb3Igc3VjaFxuKiBkYW1hZ2VzLCBjbGFpbXMsIGNvc3QsIGluY2x1ZGluZyByZWFzb25hYmxlIGF0dG9ybmV5IGZlZSBjbGFpbWVkIG9uIEp1c3BheS5cbiogVGhlIGVuZCB1c2VyIGhhcyBOTyByaWdodCB0byBjbGFpbSBhbnkgaW5kZW1uaWZpY2F0aW9uIGJhc2VkIG9uIGl0cyB1c2Vcbiogb2YgTGljZW5zZWQgU29mdHdhcmUuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4qXG4qIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC5odG1sPi5cbiovXG5cbmNvbnN0IGhlbHBlcnMgPSB7XG5cdGNvbW1vbiA6IHJlcXVpcmUoXCIuL2NvbW1vblwiKVxufTtcblxuXG5pZiAod2luZG93Ll9fT1MgPT0gXCJBTkRST0lEXCIpIHtcblx0aGVscGVycy5hbmRyb2lkID0gcmVxdWlyZShcIi4vYW5kcm9pZFwiKVxufVxuZWxzZSBpZiAod2luZG93Ll9fT1MgPT0gXCJXRUJcIikge1xuXHRoZWxwZXJzLndlYiA9IHJlcXVpcmUoXCIuL3dlYlwiKTtcbn1cbmVsc2Uge1xuXHRoZWxwZXJzLmlvcyA9IHJlcXVpcmUoXCIuL2lvc1wiKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGhlbHBlcnM7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/helpers/index.js\n");

/***/ }),

/***/ "./src/init.js":
/*!*********************!*\
  !*** ./src/init.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n * Copyright (c) 2012-2017 \"JUSPAY Technologies\"\n * JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]\n *\n * This file is part of JUSPAY Platform.\n *\n * JUSPAY Platform is free software: you can redistribute it and/or modify\n * it for only educational purposes under the terms of the GNU Affero General\n * Public License (GNU AGPL) as published by the Free Software Foundation,\n * either version 3 of the License, or (at your option) any later version.\n * For Enterprise/Commerical licenses, contact <info@juspay.in>.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will\n * be liable for all damages without limitation, which is caused by the\n * ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such\n * damages, claims, cost, including reasonable attorney fee claimed on Juspay.\n * The end user has NO right to claim any indemnification based on its use\n * of Licensed Software. See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.\n */\n\n/*\n Used to initialize defaults for window funcions and variables.\n*/\n\nconsole.log(\"document location is in init file\", document.location);\n\nvar _require = __webpack_require__(/*! ./helper */ \"./src/helper.js\"),\n    merge = _require.merge;\n\nwindow.PrestoUI = __webpack_require__(/*! ./PrestoUIInterface */ \"./src/PrestoUIInterface.js\");\n\nvar getCurrTime = function getCurrTime() {\n    return new Date().getTime();\n};\n\n// window.__OS = getOS()\nif (true) {\n    var getScreenDetails = function getScreenDetails() {\n        try {\n            var details = JSON.parse(Android.getScreenDimensions());\n            return {\n                screen_width: details.width + \"\",\n                screen_height: details.height + \"\"\n            };\n        } catch (err) {\n            console.error(\"error in gettting screen dimensions, setting default values\", err);\n            return {\n                screen_width: \"1080\",\n                screen_height: \"1920\"\n            };\n        }\n    };\n    window.__DEVICE_DETAILS = getScreenDetails();\n}\n\nif (false) {} else if (false) {}\n\nif (window.__DEVICE_DETAILS && window.__DEVICE_DETAILS.hasOwnProperty(\"screen_width\")) {\n    window.__WIDTH = window.__DEVICE_DETAILS.screen_width;\n} else {\n    window.__WIDTH = \"1080\";\n}\n\nif (window.__DEVICE_DETAILS && window.__DEVICE_DETAILS.hasOwnProperty(\"screen_height\")) {\n    window.__HEIGHT = window.__DEVICE_DETAILS.screen_height;\n} else {\n    window.__HEIGHT = \"1920\";\n}\n\nvar guid = Math.random().toString(36).substr(2, 9);\n\n//Intializing defaults\nif (false) { var duiShowScreen; } else if (false) {} else {\n    //This would be case for android\n    window.__FN_MAP = {};\n    window.__ALL_ONCLICKS = [];\n}\n\nwindow.__ID = 1;\nwindow.__NODE_ID = 1;\nwindow.__SCREEN_INDEX = -1;\n\nwindow.__PROXY_FN = {};\nwindow.__FN_INDEX = 0;\nwindow.__ROOTSCREEN = null;\nwindow.__CACHED_SCREENS = {};\nwindow.__SCREEN_COUNT = 0;\nwindow.__CURR_SCREEN = null;\nwindow.__PREV_SCREEN = null;\nwindow.__ANIMATE_DIR = null;\nwindow.__SCREEN_STACK = [];\nwindow.__LAST_FN_CALLED = null;\nwindow.__THROTTELED_ACTIONS = [];\nwindow.__VIEWS = {};\nwindow.__VIEW_DIMENSIONS = {};\nwindow.__OBSERVERS = {};\nwindow.ZIndex = 0;\n\nwindow.callUICallback = function () {\n    console.log(\"document location in callUICallback is\", document.location);\n    var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n    var fName = args[0];\n    var moreFruits = Object.assign({}, window.__PROXY_FN);\n\n    console.log(\"__PROXY_FN is\", moreFruits);\n    console.log(\"callUICallback fName is\", fName);\n    var functionArgs = args.slice(1);\n    console.log(\"args are\", functionArgs);\n    var currTime;\n    var timeDiff;\n\n    if (window.__ALL_ONCLICKS && window.__ALL_ONCLICKS.indexOf(fName) != -1 && args[2] == \"feedback\" && JBridge && JBridge.setClickFeedback) {\n        return JBridge.setClickFeedback(args[1]);\n    }\n\n    if (window.__THROTTELED_ACTIONS && window.__THROTTELED_ACTIONS.indexOf(fName) == -1) {\n        window.__PROXY_FN[fName].apply(null, functionArgs);\n    } else if (window.__LAST_FN_CALLED && fName == window.__LAST_FN_CALLED.fName) {\n        currTime = getCurrTime();\n        timeDiff = currTime - window.__LAST_FN_CALLED.timeStamp;\n\n        if (timeDiff >= 300) {\n            window.__PROXY_FN[fName].apply(null, functionArgs);\n            window.__LAST_FN_CALLED.timeStamp = currTime;\n        } else {\n            console.warn(\"function throtteled\", fName);\n            console.warn(\"time diff\", timeDiff);\n        }\n    } else {\n        window.__PROXY_FN[fName].apply(null, functionArgs);\n        window.__LAST_FN_CALLED = {\n            timeStamp: new Date().getTime(),\n            fName: fName\n        };\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/init.js\n");

/***/ }),

/***/ 0:
/*!************************!*\
  !*** multi ./index.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./index.js */"./index.js");


/***/ })

/******/ });